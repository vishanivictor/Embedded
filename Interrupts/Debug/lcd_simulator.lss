
lcd_simulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000011e  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b87  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000027  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001410  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000691  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b6  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000083  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020b  00000000  00000000  000020fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void) {


//setup code goes here
	DDRD = 0xFF; //Port D is input pin
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1 << E_PIN); //Enable E pin
  84:	3c 9a       	sbi	0x07, 4	; 7
	DDRC |= (1 << RS_PIN); //RS pin
  86:	3d 9a       	sbi	0x07, 5	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	89 ef       	ldi	r24, 0xF9	; 249
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x18>
  98:	00 00       	nop

	_delay_ms(20);//Boot delay.we need to delay the arduino boot up as LCD is bit slower than arduino

//RS pin should be made low for command mode
	PORTC &= ~(1 << RS_PIN);
  9a:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	25 e0       	ldi	r18, 0x05	; 5
  9e:	2a 95       	dec	r18
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x1e>
  a2:	00 00       	nop
	_delay_us(1);

	PORTD = 0x0F;//display ON
  a4:	8f e0       	ldi	r24, 0x0F	; 15
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x2a>
  ae:	00 00       	nop
	_delay_us(1);

//making e pin high and low so that the command is read
	PORTC |= (1 << E_PIN);//falling edge of e pin
  b0:	44 9a       	sbi	0x08, 4	; 8
  b2:	95 e0       	ldi	r25, 0x05	; 5
  b4:	9a 95       	dec	r25
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x34>
  b8:	00 00       	nop
	_delay_us(1); //add a delay between toggling of E pin so that hardware gets time to respond to the change
	PORTC &= ~(1 << E_PIN);
  ba:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	9f e1       	ldi	r25, 0x1F	; 31
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x40>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
	_delay_ms(2); // time taken for the hardware to execute the instruction

	/*clear screen - clear display commands - start*/
	PORTC &= ~(1 << RS_PIN);
  c8:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	95 e0       	ldi	r25, 0x05	; 5
  cc:	9a 95       	dec	r25
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x4c>
  d0:	00 00       	nop
	_delay_us(1);

	PORTD = 0x01;//display OFF
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	8b b9       	out	0x0b, r24	; 11

	PORTC |= (1 << E_PIN);
  d6:	44 9a       	sbi	0x08, 4	; 8
  d8:	25 e0       	ldi	r18, 0x05	; 5
  da:	2a 95       	dec	r18
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x5a>
  de:	00 00       	nop
	_delay_us(1);
	PORTC &= ~(1 << E_PIN);
  e0:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9f e1       	ldi	r25, 0x1F	; 31
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x66>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x6c>
  ec:	00 00       	nop

	/*clear display commands - end*/

	/* starting data mode*/
  //setting RS pin to high for data mode
	PORTC |= (1 << RS_PIN);
  ee:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	95 e0       	ldi	r25, 0x05	; 5
  f2:	9a 95       	dec	r25
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x72>
  f6:	00 00       	nop
		_delay_us(1);

		PORTD = 'V';
  f8:	86 e5       	ldi	r24, 0x56	; 86
  fa:	8b b9       	out	0x0b, r24	; 11

		PORTC |= (1 << E_PIN);
  fc:	44 9a       	sbi	0x08, 4	; 8
  fe:	25 e0       	ldi	r18, 0x05	; 5
 100:	2a 95       	dec	r18
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x80>
 104:	00 00       	nop
		_delay_us(1);
		PORTC &= ~(1 << E_PIN);
 106:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	9f e1       	ldi	r25, 0x1F	; 31
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x8c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x92>
 112:	00 00       	nop

		_delay_ms(2);
		/* end - data mode*/

}
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
