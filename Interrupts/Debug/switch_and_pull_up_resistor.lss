
switch_and_pull_up_resistor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000c4  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000528  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b87  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000027  00000000  00000000  000011e7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001210  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000691  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b6  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000083  00000000  00000000  00001e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020b  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void)
{
	uint8_t currentValue, oldValue =1;
	//setup code goes here
	DDRB |= (1 << 5); //PB5 as output pin – LED of arduino
  80:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= ~(1<<4); //PB0 as input pin – button
  82:	24 98       	cbi	0x04, 4	; 4
	PORTB |= (1 << 4); //Switch on pullup resistor for PB0
  84:	2c 9a       	sbi	0x05, 4	; 5
#include <util/delay.h>


int main(void)
{
	uint8_t currentValue, oldValue =1;
  86:	21 e0       	ldi	r18, 0x01	; 1
		//loop code goes here
		 if (currentValue ==0 && oldValue !=0 ) //0001 0000
		  {
			 _delay_ms(20);
		    //button pressed
		    PORTB ^= (1 << 5);
  88:	30 e2       	ldi	r19, 0x20	; 32
	DDRB &= ~(1<<4); //PB0 as input pin – button
	PORTB |= (1 << 4); //Switch on pullup resistor for PB0

	while(1)
	{
		currentValue = PINB & (1 << 4);
  8a:	83 b1       	in	r24, 0x03	; 3
		//loop code goes here
		 if (currentValue ==0 && oldValue !=0 ) //0001 0000
  8c:	98 2f       	mov	r25, r24
  8e:	90 71       	andi	r25, 0x10	; 16
  90:	84 fd       	sbrc	r24, 4
  92:	14 c0       	rjmp	.+40     	; 0xbc <main+0x3c>
  94:	22 23       	and	r18, r18
  96:	c9 f3       	breq	.-14     	; 0x8a <main+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	89 ef       	ldi	r24, 0xF9	; 249
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x28>
  a8:	00 00       	nop
		  {
			 _delay_ms(20);
		    //button pressed
		    PORTB ^= (1 << 5);
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	83 27       	eor	r24, r19
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	20 e0       	ldi	r18, 0x00	; 0
	DDRB &= ~(1<<4); //PB0 as input pin – button
	PORTB |= (1 << 4); //Switch on pullup resistor for PB0

	while(1)
	{
		currentValue = PINB & (1 << 4);
  b2:	83 b1       	in	r24, 0x03	; 3
		//loop code goes here
		 if (currentValue ==0 && oldValue !=0 ) //0001 0000
  b4:	98 2f       	mov	r25, r24
  b6:	90 71       	andi	r25, 0x10	; 16
  b8:	84 ff       	sbrs	r24, 4
  ba:	ec cf       	rjmp	.-40     	; 0x94 <main+0x14>
  bc:	29 2f       	mov	r18, r25
  be:	e5 cf       	rjmp	.-54     	; 0x8a <main+0xa>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
