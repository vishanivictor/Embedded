
CA9-PartA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000011a6  0000123a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  00800128  00800128  00001262  2**0
                  ALLOC
  3 .stab         000030f0  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002551  00000000  00000000  00004354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  000068a5  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  000068d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009a2  00000000  00000000  00006990  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000061a  00000000  00000000  00007332  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002da  00000000  00000000  0000794c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020b  00000000  00000000  00007c26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_14>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	d6 01       	movw	r26, r12
      6a:	dc 01       	movw	r26, r24
      6c:	e2 01       	movw	r28, r4
      6e:	e8 01       	movw	r28, r16
      70:	ee 01       	movw	r28, r28
      72:	f4 01       	movw	r30, r8
      74:	d0 01       	movw	r26, r0
      76:	ca 01       	movw	r24, r20

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e6 ea       	ldi	r30, 0xA6	; 166
      8c:	f1 e1       	ldi	r31, 0x11	; 17
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a8 32       	cpi	r26, 0x28	; 40
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	12 e0       	ldi	r17, 0x02	; 2
      9c:	a8 e2       	ldi	r26, 0x28	; 40
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	ac 36       	cpi	r26, 0x6C	; 108
      a6:	b1 07       	cpc	r27, r17
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 bb 04 	call	0x976	; 0x976 <main>
      ae:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <state_chart_effect_main_region_Manual_Mode_tr0>:
{
	return handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tev0_raised;
}

static void state_chart_effect_main_region_Manual_Mode_tr0(State_chart* handle)
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	ec 01       	movw	r28, r24
/* Default exit sequence for region manual region */
static void state_chart_exseq_main_region_Manual_Mode_manual_region(State_chart* handle)
{
	/* Default exit sequence for region manual region */
	/* Handle exit of all possible states (of state_chart.main_region.Manual_Mode.manual_region) at position 0... */
	switch(handle->stateConfVector[ 0 ])
      bc:	88 81       	ld	r24, Y
      be:	82 30       	cpi	r24, 0x02	; 2
      c0:	11 f0       	breq	.+4      	; 0xc6 <state_chart_effect_main_region_Manual_Mode_tr0+0x10>
      c2:	83 30       	cpi	r24, 0x03	; 3
      c4:	19 f4       	brne	.+6      	; 0xcc <state_chart_effect_main_region_Manual_Mode_tr0+0x16>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_Manual_Mode_manual_region_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
      c6:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
      c8:	1a 82       	std	Y+2, r1	; 0x02
      ca:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Automatic_Mode_automatic_region_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chartIface_setLight(handle, bool_false);
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	ce 01       	movw	r24, r28
      d0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <state_chartIface_setLight>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Automatic_Mode_automatic_region_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Automatic_Mode_automatic_region_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_Mode_automatic_region_Off;
      d4:	85 e0       	ldi	r24, 0x05	; 5
      d6:	88 83       	st	Y, r24
	handle->stateConfVectorPosition = 0;
      d8:	1a 82       	std	Y+2, r1	; 0x02
      da:	19 82       	std	Y+1, r1	; 0x01

static void state_chart_effect_main_region_Manual_Mode_tr0(State_chart* handle)
{
	state_chart_exseq_main_region_Manual_Mode(handle);
	state_chart_enseq_main_region_Automatic_Mode_default(handle);
}
      dc:	df 91       	pop	r29
      de:	cf 91       	pop	r28
      e0:	08 95       	ret

000000e2 <state_chart_effect_main_region_Automatic_Mode_tr0>:
	state_chart_exseq_main_region_Manual_Mode_manual_region_On(handle);
	state_chart_enseq_main_region_Manual_Mode_manual_region_Off_default(handle);
}

static void state_chart_effect_main_region_Automatic_Mode_tr0(State_chart* handle)
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	ec 01       	movw	r28, r24
/* Default exit sequence for region automatic region */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region(State_chart* handle)
{
	/* Default exit sequence for region automatic region */
	/* Handle exit of all possible states (of state_chart.main_region.Automatic_Mode.automatic_region) at position 0... */
	switch(handle->stateConfVector[ 0 ])
      e8:	88 81       	ld	r24, Y
      ea:	86 30       	cpi	r24, 0x06	; 6
      ec:	29 f1       	breq	.+74     	; 0x138 <state_chart_effect_main_region_Automatic_Mode_tr0+0x56>
      ee:	10 f1       	brcs	.+68     	; 0x134 <state_chart_effect_main_region_Automatic_Mode_tr0+0x52>
      f0:	87 30       	cpi	r24, 0x07	; 7
      f2:	b1 f0       	breq	.+44     	; 0x120 <state_chart_effect_main_region_Automatic_Mode_tr0+0x3e>
      f4:	88 30       	cpi	r24, 0x08	; 8
      f6:	49 f4       	brne	.+18     	; 0x10a <state_chart_effect_main_region_Automatic_Mode_tr0+0x28>

/* Default exit sequence for state Bright Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Bright Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
      f8:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
      fa:	1a 82       	std	Y+2, r1	; 0x02
      fc:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tev0_raised) );		
      fe:	be 01       	movw	r22, r28
     100:	67 5f       	subi	r22, 0xF7	; 247
     102:	7f 4f       	sbci	r23, 0xFF	; 255
     104:	ce 01       	movw	r24, r28
     106:	0e 94 da 03 	call	0x7b4	; 0x7b4 <state_chart_unsetTimer>

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Manual_Mode_manual_region_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chartIface_setLight(handle, bool_false);
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	ce 01       	movw	r24, r28
     10e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <state_chartIface_setLight>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Manual_Mode_manual_region_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Manual_Mode_manual_region_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_Mode_manual_region_Off;
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	88 83       	st	Y, r24
	handle->stateConfVectorPosition = 0;
     116:	1a 82       	std	Y+2, r1	; 0x02
     118:	19 82       	std	Y+1, r1	; 0x01

static void state_chart_effect_main_region_Automatic_Mode_tr0(State_chart* handle)
{
	state_chart_exseq_main_region_Automatic_Mode(handle);
	state_chart_enseq_main_region_Manual_Mode_default(handle);
}
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

/* Default exit sequence for state Dark Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_Dark_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Dark Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
     120:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     122:	1a 82       	std	Y+2, r1	; 0x02
     124:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Dark Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_automatic_region_Dark_Waiting(State_chart* handle)
{
	/* Exit action for state 'Dark Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting_tev0_raised) );		
     126:	be 01       	movw	r22, r28
     128:	68 5f       	subi	r22, 0xF8	; 248
     12a:	7f 4f       	sbci	r23, 0xFF	; 255
     12c:	ce 01       	movw	r24, r28
     12e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <state_chart_unsetTimer>
     132:	eb cf       	rjmp	.-42     	; 0x10a <state_chart_effect_main_region_Automatic_Mode_tr0+0x28>
/* Default exit sequence for region automatic region */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region(State_chart* handle)
{
	/* Default exit sequence for region automatic region */
	/* Handle exit of all possible states (of state_chart.main_region.Automatic_Mode.automatic_region) at position 0... */
	switch(handle->stateConfVector[ 0 ])
     134:	85 30       	cpi	r24, 0x05	; 5
     136:	49 f7       	brne	.-46     	; 0x10a <state_chart_effect_main_region_Automatic_Mode_tr0+0x28>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
     138:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     13a:	1a 82       	std	Y+2, r1	; 0x02
     13c:	19 82       	std	Y+1, r1	; 0x01
     13e:	e5 cf       	rjmp	.-54     	; 0x10a <state_chart_effect_main_region_Automatic_Mode_tr0+0x28>

00000140 <state_chart_init>:
static void state_chart_clearInEvents(State_chart* handle);
static void state_chart_clearOutEvents(State_chart* handle);


void state_chart_init(State_chart* handle)
{
     140:	fc 01       	movw	r30, r24
		sc_integer i;
	
		for (i = 0; i < STATE_CHART_MAX_ORTHOGONAL_STATES; ++i)
		{
			handle->stateConfVector[i] = State_chart_last_state;
     142:	10 82       	st	Z, r1
		}
		
		
		handle->stateConfVectorPosition = 0;
     144:	12 82       	std	Z+2, r1	; 0x02
     146:	11 82       	std	Z+1, r1	; 0x01
   return bool_false;
}

static void state_chart_clearInEvents(State_chart* handle)
{
	handle->iface.key_on_raised = bool_false;
     148:	13 82       	std	Z+3, r1	; 0x03
	handle->iface.key_off_raised = bool_false;
     14a:	14 82       	std	Z+4, r1	; 0x04
	handle->iface.key_mode_raised = bool_false;
     14c:	15 82       	std	Z+5, r1	; 0x05
	handle->iface.dark_raised = bool_false;
     14e:	16 82       	std	Z+6, r1	; 0x06
	handle->iface.bright_raised = bool_false;
     150:	17 82       	std	Z+7, r1	; 0x07
	handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting_tev0_raised = bool_false;
     152:	10 86       	std	Z+8, r1	; 0x08
	handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tev0_raised = bool_false;
     154:	11 86       	std	Z+9, r1	; 0x09
     156:	08 95       	ret

00000158 <state_chart_enter>:
		state_chart_clearOutEvents(handle);
	
}

void state_chart_enter(State_chart* handle)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	ec 01       	movw	r28, r24

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Manual_Mode_manual_region_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chartIface_setLight(handle, bool_false);
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	0e 94 78 05 	call	0xaf0	; 0xaf0 <state_chartIface_setLight>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Manual_Mode_manual_region_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Manual_Mode_manual_region_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_Mode_manual_region_Off;
     164:	82 e0       	ldi	r24, 0x02	; 2
     166:	88 83       	st	Y, r24
	handle->stateConfVectorPosition = 0;
     168:	1a 82       	std	Y+2, r1	; 0x02
     16a:	19 82       	std	Y+1, r1	; 0x01

void state_chart_enter(State_chart* handle)
{
	/* Default enter sequence for statechart state_chart */
	state_chart_enseq_main_region_default(handle);
}
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <state_chart_exit>:

void state_chart_exit(State_chart* handle)
{
     172:	fc 01       	movw	r30, r24
/* Default exit sequence for region main region */
static void state_chart_exseq_main_region(State_chart* handle)
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of state_chart.main_region) at position 0... */
	switch(handle->stateConfVector[ 0 ])
     174:	80 81       	ld	r24, Z
     176:	85 30       	cpi	r24, 0x05	; 5
     178:	99 f0       	breq	.+38     	; 0x1a0 <state_chart_exit+0x2e>
     17a:	70 f0       	brcs	.+28     	; 0x198 <state_chart_exit+0x26>
     17c:	87 30       	cpi	r24, 0x07	; 7
     17e:	a1 f0       	breq	.+40     	; 0x1a8 <state_chart_exit+0x36>
     180:	78 f0       	brcs	.+30     	; 0x1a0 <state_chart_exit+0x2e>
     182:	88 30       	cpi	r24, 0x08	; 8
     184:	d9 f4       	brne	.+54     	; 0x1bc <state_chart_exit+0x4a>

/* Default exit sequence for state Bright Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Bright Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
     186:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
     188:	12 82       	std	Z+2, r1	; 0x02
     18a:	11 82       	std	Z+1, r1	; 0x01

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tev0_raised) );		
     18c:	bf 01       	movw	r22, r30
     18e:	67 5f       	subi	r22, 0xF7	; 247
     190:	7f 4f       	sbci	r23, 0xFF	; 255
     192:	cf 01       	movw	r24, r30
     194:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <state_chart_unsetTimer>
/* Default exit sequence for region main region */
static void state_chart_exseq_main_region(State_chart* handle)
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of state_chart.main_region) at position 0... */
	switch(handle->stateConfVector[ 0 ])
     198:	82 30       	cpi	r24, 0x02	; 2
     19a:	11 f0       	breq	.+4      	; 0x1a0 <state_chart_exit+0x2e>
     19c:	83 30       	cpi	r24, 0x03	; 3
     19e:	69 f4       	brne	.+26     	; 0x1ba <state_chart_exit+0x48>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
     1a0:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
     1a2:	12 82       	std	Z+2, r1	; 0x02
     1a4:	11 82       	std	Z+1, r1	; 0x01
     1a6:	08 95       	ret

/* Default exit sequence for state Dark Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_Dark_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Dark Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
     1a8:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
     1aa:	12 82       	std	Z+2, r1	; 0x02
     1ac:	11 82       	std	Z+1, r1	; 0x01

/* Exit action for state 'Dark Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_automatic_region_Dark_Waiting(State_chart* handle)
{
	/* Exit action for state 'Dark Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting_tev0_raised) );		
     1ae:	bf 01       	movw	r22, r30
     1b0:	68 5f       	subi	r22, 0xF8	; 248
     1b2:	7f 4f       	sbci	r23, 0xFF	; 255
     1b4:	cf 01       	movw	r24, r30
     1b6:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <state_chart_unsetTimer>
     1ba:	08 95       	ret
     1bc:	08 95       	ret

000001be <state_chart_isActive>:
	/* Default exit sequence for statechart state_chart */
	state_chart_exseq_main_region(handle);
}

sc_boolean state_chart_isActive(const State_chart* handle)
{
     1be:	fc 01       	movw	r30, r24
	sc_boolean result = bool_false;
	int i;
	
	for(i = 0; i < STATE_CHART_MAX_ORTHOGONAL_STATES; i++)
	{
		result = result || handle->stateConfVector[i] != State_chart_last_state;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 81       	ld	r25, Z
     1c4:	91 11       	cpse	r25, r1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <state_chart_isActive+0xc>
     1c8:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return result;
}
     1ca:	08 95       	ret

000001cc <state_chart_isFinal>:
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean state_chart_isFinal(const State_chart* handle)
{
   return bool_false;
}
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret

000001d0 <state_chart_runCycle>:
static void state_chart_clearOutEvents(State_chart* handle)
{
}

void state_chart_runCycle(State_chart* handle)
{
     1d0:	0f 93       	push	r16
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	ec 01       	movw	r28, r24
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
     1d8:	1a 82       	std	Y+2, r1	; 0x02
     1da:	19 82       	std	Y+1, r1	; 0x01
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
		{
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
     1dc:	88 81       	ld	r24, Y
     1de:	85 30       	cpi	r24, 0x05	; 5
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <state_chart_runCycle+0x14>
     1e2:	5e c0       	rjmp	.+188    	; 0x2a0 <state_chart_runCycle+0xd0>
     1e4:	08 f1       	brcs	.+66     	; 0x228 <state_chart_runCycle+0x58>
     1e6:	87 30       	cpi	r24, 0x07	; 7
     1e8:	09 f4       	brne	.+2      	; 0x1ec <state_chart_runCycle+0x1c>
     1ea:	76 c0       	rjmp	.+236    	; 0x2d8 <state_chart_runCycle+0x108>
     1ec:	88 f1       	brcs	.+98     	; 0x250 <state_chart_runCycle+0x80>
     1ee:	88 30       	cpi	r24, 0x08	; 8
     1f0:	49 f4       	brne	.+18     	; 0x204 <state_chart_runCycle+0x34>

/* The reactions of state Bright Waiting. */
static void state_chart_react_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* The reactions of state Bright Waiting. */
	if (state_chart_check_main_region_Automatic_Mode_tr0_tr0(handle) == bool_true)
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
     1f4:	81 11       	cpse	r24, r1
     1f6:	8a c0       	rjmp	.+276    	; 0x30c <state_chart_runCycle+0x13c>
	{ 
		state_chart_effect_main_region_Automatic_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tr0_tr0(handle) == bool_true)
     1f8:	8e 81       	ldd	r24, Y+6	; 0x06
     1fa:	81 11       	cpse	r24, r1
     1fc:	a9 c0       	rjmp	.+338    	; 0x350 <state_chart_runCycle+0x180>
		{ 
			state_chart_effect_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tr0(handle);
		}  else
		{
			if (state_chart_check_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tr1_tr1(handle) == bool_true)
     1fe:	89 85       	ldd	r24, Y+9	; 0x09
     200:	81 11       	cpse	r24, r1
     202:	8f c0       	rjmp	.+286    	; 0x322 <state_chart_runCycle+0x152>
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	9a 81       	ldd	r25, Y+2	; 0x02
     208:	01 96       	adiw	r24, 0x01	; 1
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
     20a:	9a 83       	std	Y+2, r25	; 0x02
     20c:	89 83       	std	Y+1, r24	; 0x01

void state_chart_runCycle(State_chart* handle)
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
     20e:	89 2b       	or	r24, r25
     210:	29 f3       	breq	.-54     	; 0x1dc <state_chart_runCycle+0xc>
   return bool_false;
}

static void state_chart_clearInEvents(State_chart* handle)
{
	handle->iface.key_on_raised = bool_false;
     212:	1b 82       	std	Y+3, r1	; 0x03
	handle->iface.key_off_raised = bool_false;
     214:	1c 82       	std	Y+4, r1	; 0x04
	handle->iface.key_mode_raised = bool_false;
     216:	1d 82       	std	Y+5, r1	; 0x05
	handle->iface.dark_raised = bool_false;
     218:	1e 82       	std	Y+6, r1	; 0x06
	handle->iface.bright_raised = bool_false;
     21a:	1f 82       	std	Y+7, r1	; 0x07
	handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting_tev0_raised = bool_false;
     21c:	18 86       	std	Y+8, r1	; 0x08
	handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tev0_raised = bool_false;
     21e:	19 86       	std	Y+9, r1	; 0x09
			break;
		}
	}
	
	state_chart_clearInEvents(handle);
}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	0f 91       	pop	r16
     226:	08 95       	ret
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
		{
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
     228:	82 30       	cpi	r24, 0x02	; 2
     22a:	49 f1       	breq	.+82     	; 0x27e <state_chart_runCycle+0xae>
     22c:	83 30       	cpi	r24, 0x03	; 3
     22e:	51 f7       	brne	.-44     	; 0x204 <state_chart_runCycle+0x34>

/* The reactions of state On. */
static void state_chart_react_main_region_Manual_Mode_manual_region_On(State_chart* handle)
{
	/* The reactions of state On. */
	if (state_chart_check_main_region_Manual_Mode_tr0_tr0(handle) == bool_true)
     230:	8d 81       	ldd	r24, Y+5	; 0x05
     232:	81 11       	cpse	r24, r1
     234:	72 c0       	rjmp	.+228    	; 0x31a <state_chart_runCycle+0x14a>
	{ 
		state_chart_effect_main_region_Manual_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Manual_Mode_manual_region_On_tr0_tr0(handle) == bool_true)
     236:	8c 81       	ldd	r24, Y+4	; 0x04
     238:	88 23       	and	r24, r24
     23a:	21 f3       	breq	.-56     	; 0x204 <state_chart_runCycle+0x34>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_Manual_Mode_manual_region_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
     23c:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     23e:	1a 82       	std	Y+2, r1	; 0x02
     240:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Manual_Mode_manual_region_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chartIface_setLight(handle, bool_false);
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	ce 01       	movw	r24, r28
     246:	0e 94 78 05 	call	0xaf0	; 0xaf0 <state_chartIface_setLight>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Manual_Mode_manual_region_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Manual_Mode_manual_region_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_Mode_manual_region_Off;
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	88 83       	st	Y, r24
     24e:	3f c0       	rjmp	.+126    	; 0x2ce <state_chart_runCycle+0xfe>

/* The reactions of state On. */
static void state_chart_react_main_region_Automatic_Mode_automatic_region_On(State_chart* handle)
{
	/* The reactions of state On. */
	if (state_chart_check_main_region_Automatic_Mode_tr0_tr0(handle) == bool_true)
     250:	8d 81       	ldd	r24, Y+5	; 0x05
     252:	81 11       	cpse	r24, r1
     254:	5b c0       	rjmp	.+182    	; 0x30c <state_chart_runCycle+0x13c>
	{ 
		state_chart_effect_main_region_Automatic_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_Mode_automatic_region_On_tr0_tr0(handle) == bool_true)
     256:	8f 81       	ldd	r24, Y+7	; 0x07
     258:	88 23       	and	r24, r24
     25a:	a1 f2       	breq	.-88     	; 0x204 <state_chart_runCycle+0x34>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
     25c:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     25e:	1a 82       	std	Y+2, r1	; 0x02
     260:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'Bright Waiting'. */
static void state_chart_enact_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Entry action for state 'Bright Waiting'. */
	state_chart_setTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tev0_raised) , 1 * 1000, bool_false);
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	28 ee       	ldi	r18, 0xE8	; 232
     266:	33 e0       	ldi	r19, 0x03	; 3
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	be 01       	movw	r22, r28
     26e:	67 5f       	subi	r22, 0xF7	; 247
     270:	7f 4f       	sbci	r23, 0xFF	; 255
     272:	ce 01       	movw	r24, r28
     274:	0e 94 80 03 	call	0x700	; 0x700 <state_chart_setTimer>
/* 'default' enter sequence for state Bright Waiting */
static void state_chart_enseq_main_region_Automatic_Mode_automatic_region_Bright_Waiting_default(State_chart* handle)
{
	/* 'default' enter sequence for state Bright Waiting */
	state_chart_enact_main_region_Automatic_Mode_automatic_region_Bright_Waiting(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting;
     278:	88 e0       	ldi	r24, 0x08	; 8
     27a:	88 83       	st	Y, r24
     27c:	28 c0       	rjmp	.+80     	; 0x2ce <state_chart_runCycle+0xfe>

/* The reactions of state Off. */
static void state_chart_react_main_region_Manual_Mode_manual_region_Off(State_chart* handle)
{
	/* The reactions of state Off. */
	if (state_chart_check_main_region_Manual_Mode_tr0_tr0(handle) == bool_true)
     27e:	8d 81       	ldd	r24, Y+5	; 0x05
     280:	81 11       	cpse	r24, r1
     282:	4b c0       	rjmp	.+150    	; 0x31a <state_chart_runCycle+0x14a>
	{ 
		state_chart_effect_main_region_Manual_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Manual_Mode_manual_region_Off_tr0_tr0(handle) == bool_true)
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	88 23       	and	r24, r24
     288:	09 f4       	brne	.+2      	; 0x28c <state_chart_runCycle+0xbc>
     28a:	bc cf       	rjmp	.-136    	; 0x204 <state_chart_runCycle+0x34>

/* Default exit sequence for state Off */
static void state_chart_exseq_main_region_Manual_Mode_manual_region_Off(State_chart* handle)
{
	/* Default exit sequence for state Off */
	handle->stateConfVector[0] = State_chart_last_state;
     28c:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     28e:	1a 82       	std	Y+2, r1	; 0x02
     290:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'On'. */
static void state_chart_enact_main_region_Manual_Mode_manual_region_On(State_chart* handle)
{
	/* Entry action for state 'On'. */
	state_chartIface_setLight(handle, bool_true);
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	ce 01       	movw	r24, r28
     296:	0e 94 78 05 	call	0xaf0	; 0xaf0 <state_chartIface_setLight>
/* 'default' enter sequence for state On */
static void state_chart_enseq_main_region_Manual_Mode_manual_region_On_default(State_chart* handle)
{
	/* 'default' enter sequence for state On */
	state_chart_enact_main_region_Manual_Mode_manual_region_On(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_Mode_manual_region_On;
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	88 83       	st	Y, r24
     29e:	17 c0       	rjmp	.+46     	; 0x2ce <state_chart_runCycle+0xfe>

/* The reactions of state Off. */
static void state_chart_react_main_region_Automatic_Mode_automatic_region_Off(State_chart* handle)
{
	/* The reactions of state Off. */
	if (state_chart_check_main_region_Automatic_Mode_tr0_tr0(handle) == bool_true)
     2a0:	8d 81       	ldd	r24, Y+5	; 0x05
     2a2:	81 11       	cpse	r24, r1
     2a4:	33 c0       	rjmp	.+102    	; 0x30c <state_chart_runCycle+0x13c>
	{ 
		state_chart_effect_main_region_Automatic_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_Mode_automatic_region_Off_tr0_tr0(handle) == bool_true)
     2a6:	8e 81       	ldd	r24, Y+6	; 0x06
     2a8:	88 23       	and	r24, r24
     2aa:	09 f4       	brne	.+2      	; 0x2ae <state_chart_runCycle+0xde>
     2ac:	ab cf       	rjmp	.-170    	; 0x204 <state_chart_runCycle+0x34>

/* Default exit sequence for state Off */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_Off(State_chart* handle)
{
	/* Default exit sequence for state Off */
	handle->stateConfVector[0] = State_chart_last_state;
     2ae:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     2b0:	1a 82       	std	Y+2, r1	; 0x02
     2b2:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'Dark Waiting'. */
static void state_chart_enact_main_region_Automatic_Mode_automatic_region_Dark_Waiting(State_chart* handle)
{
	/* Entry action for state 'Dark Waiting'. */
	state_chart_setTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting_tev0_raised) , 1 * 1000, bool_false);
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	28 ee       	ldi	r18, 0xE8	; 232
     2b8:	33 e0       	ldi	r19, 0x03	; 3
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	be 01       	movw	r22, r28
     2c0:	68 5f       	subi	r22, 0xF8	; 248
     2c2:	7f 4f       	sbci	r23, 0xFF	; 255
     2c4:	ce 01       	movw	r24, r28
     2c6:	0e 94 80 03 	call	0x700	; 0x700 <state_chart_setTimer>
/* 'default' enter sequence for state Dark Waiting */
static void state_chart_enseq_main_region_Automatic_Mode_automatic_region_Dark_Waiting_default(State_chart* handle)
{
	/* 'default' enter sequence for state Dark Waiting */
	state_chart_enact_main_region_Automatic_Mode_automatic_region_Dark_Waiting(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting;
     2ca:	87 e0       	ldi	r24, 0x07	; 7
     2cc:	88 83       	st	Y, r24
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	9a 83       	std	Y+2, r25	; 0x02
     2d4:	89 83       	std	Y+1, r24	; 0x01
     2d6:	9d cf       	rjmp	.-198    	; 0x212 <state_chart_runCycle+0x42>

/* The reactions of state Dark Waiting. */
static void state_chart_react_main_region_Automatic_Mode_automatic_region_Dark_Waiting(State_chart* handle)
{
	/* The reactions of state Dark Waiting. */
	if (state_chart_check_main_region_Automatic_Mode_tr0_tr0(handle) == bool_true)
     2d8:	8d 81       	ldd	r24, Y+5	; 0x05
     2da:	81 11       	cpse	r24, r1
     2dc:	17 c0       	rjmp	.+46     	; 0x30c <state_chart_runCycle+0x13c>
	{ 
		state_chart_effect_main_region_Automatic_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_Mode_automatic_region_Dark_Waiting_tr0_tr0(handle) == bool_true)
     2de:	88 85       	ldd	r24, Y+8	; 0x08
     2e0:	81 11       	cpse	r24, r1
     2e2:	26 c0       	rjmp	.+76     	; 0x330 <state_chart_runCycle+0x160>
		{ 
			state_chart_effect_main_region_Automatic_Mode_automatic_region_Dark_Waiting_tr0(handle);
		}  else
		{
			if (state_chart_check_main_region_Automatic_Mode_automatic_region_Dark_Waiting_tr1_tr1(handle) == bool_true)
     2e4:	8f 81       	ldd	r24, Y+7	; 0x07
     2e6:	88 23       	and	r24, r24
     2e8:	09 f4       	brne	.+2      	; 0x2ec <state_chart_runCycle+0x11c>
     2ea:	8c cf       	rjmp	.-232    	; 0x204 <state_chart_runCycle+0x34>

/* Default exit sequence for state Dark Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_Dark_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Dark Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
     2ec:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     2ee:	1a 82       	std	Y+2, r1	; 0x02
     2f0:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Dark Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_automatic_region_Dark_Waiting(State_chart* handle)
{
	/* Exit action for state 'Dark Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting_tev0_raised) );		
     2f2:	be 01       	movw	r22, r28
     2f4:	68 5f       	subi	r22, 0xF8	; 248
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tev0_raised) );		
     2f8:	ce 01       	movw	r24, r28
     2fa:	0e 94 da 03 	call	0x7b4	; 0x7b4 <state_chart_unsetTimer>

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Automatic_Mode_automatic_region_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chartIface_setLight(handle, bool_false);
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	ce 01       	movw	r24, r28
     302:	0e 94 78 05 	call	0xaf0	; 0xaf0 <state_chartIface_setLight>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Automatic_Mode_automatic_region_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Automatic_Mode_automatic_region_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_Mode_automatic_region_Off;
     306:	85 e0       	ldi	r24, 0x05	; 5
     308:	88 83       	st	Y, r24
     30a:	e1 cf       	rjmp	.-62     	; 0x2ce <state_chart_runCycle+0xfe>
static void state_chart_react_main_region_Automatic_Mode_automatic_region_Off(State_chart* handle)
{
	/* The reactions of state Off. */
	if (state_chart_check_main_region_Automatic_Mode_tr0_tr0(handle) == bool_true)
	{ 
		state_chart_effect_main_region_Automatic_Mode_tr0(handle);
     30c:	ce 01       	movw	r24, r28
     30e:	0e 94 71 00 	call	0xe2	; 0xe2 <state_chart_effect_main_region_Automatic_Mode_tr0>
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	9a 81       	ldd	r25, Y+2	; 0x02
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	78 cf       	rjmp	.-272    	; 0x20a <state_chart_runCycle+0x3a>
static void state_chart_react_main_region_Manual_Mode_manual_region_Off(State_chart* handle)
{
	/* The reactions of state Off. */
	if (state_chart_check_main_region_Manual_Mode_tr0_tr0(handle) == bool_true)
	{ 
		state_chart_effect_main_region_Manual_Mode_tr0(handle);
     31a:	ce 01       	movw	r24, r28
     31c:	0e 94 5b 00 	call	0xb6	; 0xb6 <state_chart_effect_main_region_Manual_Mode_tr0>
     320:	71 cf       	rjmp	.-286    	; 0x204 <state_chart_runCycle+0x34>

/* Default exit sequence for state Bright Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Bright Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
     322:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     324:	1a 82       	std	Y+2, r1	; 0x02
     326:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tev0_raised) );		
     328:	be 01       	movw	r22, r28
     32a:	67 5f       	subi	r22, 0xF7	; 247
     32c:	7f 4f       	sbci	r23, 0xFF	; 255
     32e:	e4 cf       	rjmp	.-56     	; 0x2f8 <state_chart_runCycle+0x128>

/* Default exit sequence for state Dark Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_Dark_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Dark Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
     330:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     332:	1a 82       	std	Y+2, r1	; 0x02
     334:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Dark Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_automatic_region_Dark_Waiting(State_chart* handle)
{
	/* Exit action for state 'Dark Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting_tev0_raised) );		
     336:	be 01       	movw	r22, r28
     338:	68 5f       	subi	r22, 0xF8	; 248
     33a:	7f 4f       	sbci	r23, 0xFF	; 255

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tev0_raised) );		
     33c:	ce 01       	movw	r24, r28
     33e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <state_chart_unsetTimer>

/* Entry action for state 'On'. */
static void state_chart_enact_main_region_Automatic_Mode_automatic_region_On(State_chart* handle)
{
	/* Entry action for state 'On'. */
	state_chartIface_setLight(handle, bool_true);
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	ce 01       	movw	r24, r28
     346:	0e 94 78 05 	call	0xaf0	; 0xaf0 <state_chartIface_setLight>
/* 'default' enter sequence for state On */
static void state_chart_enseq_main_region_Automatic_Mode_automatic_region_On_default(State_chart* handle)
{
	/* 'default' enter sequence for state On */
	state_chart_enact_main_region_Automatic_Mode_automatic_region_On(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_Mode_automatic_region_On;
     34a:	86 e0       	ldi	r24, 0x06	; 6
     34c:	88 83       	st	Y, r24
     34e:	bf cf       	rjmp	.-130    	; 0x2ce <state_chart_runCycle+0xfe>

/* Default exit sequence for state Bright Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Bright Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
     350:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
     352:	1a 82       	std	Y+2, r1	; 0x02
     354:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_automatic_region_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting_tev0_raised) );		
     356:	be 01       	movw	r22, r28
     358:	67 5f       	subi	r22, 0xF7	; 247
     35a:	7f 4f       	sbci	r23, 0xFF	; 255
     35c:	ef cf       	rjmp	.-34     	; 0x33c <state_chart_runCycle+0x16c>

0000035e <state_chart_raiseTimeEvent>:
	state_chart_clearInEvents(handle);
}

void state_chart_raiseTimeEvent(const State_chart* handle, sc_eventid evid)
{
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
     35e:	9c 01       	movw	r18, r24
     360:	28 5f       	subi	r18, 0xF8	; 248
     362:	3f 4f       	sbci	r19, 0xFF	; 255
     364:	62 17       	cp	r22, r18
     366:	73 07       	cpc	r23, r19
     368:	3c f0       	brlt	.+14     	; 0x378 <state_chart_raiseTimeEvent+0x1a>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + sizeof(State_chartTimeEvents))
     36a:	0a 96       	adiw	r24, 0x0a	; 10
     36c:	68 17       	cp	r22, r24
     36e:	79 07       	cpc	r23, r25
     370:	18 f4       	brcc	.+6      	; 0x378 <state_chart_raiseTimeEvent+0x1a>
		{
		*(sc_boolean*)evid = bool_true;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	fb 01       	movw	r30, r22
     376:	80 83       	st	Z, r24
     378:	08 95       	ret

0000037a <state_chart_isStateActive>:
	}		
}

sc_boolean state_chart_isStateActive(const State_chart* handle, State_chartStates state)
{
     37a:	dc 01       	movw	r26, r24
	sc_boolean result = bool_false;
	switch (state)
     37c:	46 2f       	mov	r20, r22
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	41 50       	subi	r20, 0x01	; 1
     382:	51 09       	sbc	r21, r1
     384:	48 30       	cpi	r20, 0x08	; 8
     386:	51 05       	cpc	r21, r1
     388:	48 f4       	brcc	.+18     	; 0x39c <state_chart_isStateActive+0x22>
     38a:	4c 5c       	subi	r20, 0xCC	; 204
     38c:	5f 4f       	sbci	r21, 0xFF	; 255
     38e:	fa 01       	movw	r30, r20
     390:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__tablejump2__>
		case State_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_DARK_WAITING] == State_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting
			);
			break;
		case State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	9c 91       	ld	r25, X
     398:	98 30       	cpi	r25, 0x08	; 8
     39a:	09 f0       	breq	.+2      	; 0x39e <state_chart_isStateActive+0x24>
			);
			break;
		default:
			result = bool_false;
     39c:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return result;
}
     39e:	08 95       	ret
		case State_chart_main_region_Automatic_Mode_automatic_region_On :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_ON] == State_chart_main_region_Automatic_Mode_automatic_region_On
			);
			break;
		case State_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_DARK_WAITING] == State_chart_main_region_Automatic_Mode_automatic_region_Dark_Waiting
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	9c 91       	ld	r25, X
     3a4:	97 30       	cpi	r25, 0x07	; 7
     3a6:	d9 f3       	breq	.-10     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting
			);
			break;
		default:
			result = bool_false;
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	f9 cf       	rjmp	.-14     	; 0x39e <state_chart_isStateActive+0x24>
	sc_boolean result = bool_false;
	switch (state)
	{
		case State_chart_main_region_Manual_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE] >= State_chart_main_region_Manual_Mode
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE] <= State_chart_main_region_Manual_Mode_manual_region_On);
     3ac:	9c 91       	ld	r25, X
     3ae:	91 50       	subi	r25, 0x01	; 1
{
	sc_boolean result = bool_false;
	switch (state)
	{
		case State_chart_main_region_Manual_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE] >= State_chart_main_region_Manual_Mode
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	93 30       	cpi	r25, 0x03	; 3
     3b4:	98 f7       	brcc	.-26     	; 0x39c <state_chart_isStateActive+0x22>
		default:
			result = bool_false;
			break;
	}
	return result;
}
     3b6:	08 95       	ret
		case State_chart_main_region_Manual_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE] >= State_chart_main_region_Manual_Mode
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE] <= State_chart_main_region_Manual_Mode_manual_region_On);
			break;
		case State_chart_main_region_Manual_Mode_manual_region_Off :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE_MANUAL_REGION_OFF] == State_chart_main_region_Manual_Mode_manual_region_Off
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	9c 91       	ld	r25, X
     3bc:	92 30       	cpi	r25, 0x02	; 2
     3be:	79 f3       	breq	.-34     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting
			);
			break;
		default:
			result = bool_false;
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	ed cf       	rjmp	.-38     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Manual_Mode_manual_region_Off :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE_MANUAL_REGION_OFF] == State_chart_main_region_Manual_Mode_manual_region_Off
			);
			break;
		case State_chart_main_region_Manual_Mode_manual_region_On :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE_MANUAL_REGION_ON] == State_chart_main_region_Manual_Mode_manual_region_On
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	9c 91       	ld	r25, X
     3c8:	93 30       	cpi	r25, 0x03	; 3
     3ca:	49 f3       	breq	.-46     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting
			);
			break;
		default:
			result = bool_false;
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	e7 cf       	rjmp	.-50     	; 0x39e <state_chart_isStateActive+0x24>
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE_MANUAL_REGION_ON] == State_chart_main_region_Manual_Mode_manual_region_On
			);
			break;
		case State_chart_main_region_Automatic_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE] >= State_chart_main_region_Automatic_Mode
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE] <= State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting);
     3d0:	9c 91       	ld	r25, X
     3d2:	94 50       	subi	r25, 0x04	; 4
		case State_chart_main_region_Manual_Mode_manual_region_On :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE_MANUAL_REGION_ON] == State_chart_main_region_Manual_Mode_manual_region_On
			);
			break;
		case State_chart_main_region_Automatic_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE] >= State_chart_main_region_Automatic_Mode
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	95 30       	cpi	r25, 0x05	; 5
     3d8:	08 f7       	brcc	.-62     	; 0x39c <state_chart_isStateActive+0x22>
		default:
			result = bool_false;
			break;
	}
	return result;
}
     3da:	08 95       	ret
		case State_chart_main_region_Automatic_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE] >= State_chart_main_region_Automatic_Mode
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE] <= State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting);
			break;
		case State_chart_main_region_Automatic_Mode_automatic_region_Off :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_OFF] == State_chart_main_region_Automatic_Mode_automatic_region_Off
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	9c 91       	ld	r25, X
     3e0:	95 30       	cpi	r25, 0x05	; 5
     3e2:	e9 f2       	breq	.-70     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting
			);
			break;
		default:
			result = bool_false;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	db cf       	rjmp	.-74     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_automatic_region_Off :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_OFF] == State_chart_main_region_Automatic_Mode_automatic_region_Off
			);
			break;
		case State_chart_main_region_Automatic_Mode_automatic_region_On :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_ON] == State_chart_main_region_Automatic_Mode_automatic_region_On
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	9c 91       	ld	r25, X
     3ec:	96 30       	cpi	r25, 0x06	; 6
     3ee:	b9 f2       	breq	.-82     	; 0x39e <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_AUTOMATIC_REGION_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_automatic_region_Bright_Waiting
			);
			break;
		default:
			result = bool_false;
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	d5 cf       	rjmp	.-86     	; 0x39e <state_chart_isStateActive+0x24>

000003f4 <state_chartIface_raise_key_on>:
	return result;
}

void state_chartIface_raise_key_on(State_chart* handle)
{
	handle->iface.key_on_raised = bool_true;
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	fc 01       	movw	r30, r24
     3f8:	23 83       	std	Z+3, r18	; 0x03
     3fa:	08 95       	ret

000003fc <state_chartIface_raise_key_off>:
}
void state_chartIface_raise_key_off(State_chart* handle)
{
	handle->iface.key_off_raised = bool_true;
     3fc:	21 e0       	ldi	r18, 0x01	; 1
     3fe:	fc 01       	movw	r30, r24
     400:	24 83       	std	Z+4, r18	; 0x04
     402:	08 95       	ret

00000404 <state_chartIface_raise_key_mode>:
}
void state_chartIface_raise_key_mode(State_chart* handle)
{
	handle->iface.key_mode_raised = bool_true;
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	fc 01       	movw	r30, r24
     408:	25 83       	std	Z+5, r18	; 0x05
     40a:	08 95       	ret

0000040c <state_chartIface_raise_dark>:
}
void state_chartIface_raise_dark(State_chart* handle)
{
	handle->iface.dark_raised = bool_true;
     40c:	21 e0       	ldi	r18, 0x01	; 1
     40e:	fc 01       	movw	r30, r24
     410:	26 83       	std	Z+6, r18	; 0x06
     412:	08 95       	ret

00000414 <state_chartIface_raise_bright>:
}
void state_chartIface_raise_bright(State_chart* handle)
{
	handle->iface.bright_raised = bool_true;
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	fc 01       	movw	r30, r24
     418:	27 83       	std	Z+7, r18	; 0x07
     41a:	08 95       	ret

0000041c <sc_timer_start>:



/*! Starts a timer with the specified parameters. */
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {
     41c:	6f 92       	push	r6
     41e:	7f 92       	push	r7
     420:	8f 92       	push	r8
     422:	9f 92       	push	r9
     424:	af 92       	push	r10
     426:	bf 92       	push	r11
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	ce 2d       	mov	r28, r14


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
     438:	dc 01       	movw	r26, r24
     43a:	8d 90       	ld	r8, X+
     43c:	9d 90       	ld	r9, X+
     43e:	ad 90       	ld	r10, X+
     440:	bc 90       	ld	r11, X
     442:	13 97       	sbiw	r26, 0x03	; 3
     444:	18 14       	cp	r1, r8
     446:	19 04       	cpc	r1, r9
     448:	1a 04       	cpc	r1, r10
     44a:	1b 04       	cpc	r1, r11
     44c:	1c f5       	brge	.+70     	; 0x494 <sc_timer_start+0x78>

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {
     44e:	14 96       	adiw	r26, 0x04	; 4
     450:	ed 91       	ld	r30, X+
     452:	fc 91       	ld	r31, X
     454:	15 97       	sbiw	r26, 0x05	; 5
     456:	a1 85       	ldd	r26, Z+9	; 0x09
     458:	b2 85       	ldd	r27, Z+10	; 0x0a
     45a:	ab 2b       	or	r26, r27
     45c:	49 f1       	breq	.+82     	; 0x4b0 <sc_timer_start+0x94>
     45e:	3f 01       	movw	r6, r30
     460:	bf e0       	ldi	r27, 0x0F	; 15
     462:	6b 0e       	add	r6, r27
     464:	71 1c       	adc	r7, r1
     466:	c1 2c       	mov	r12, r1
     468:	d1 2c       	mov	r13, r1
     46a:	76 01       	movw	r14, r12
     46c:	c3 94       	inc	r12
     46e:	0d c0       	rjmp	.+26     	; 0x48a <sc_timer_start+0x6e>
     470:	f3 01       	movw	r30, r6
     472:	bf ef       	ldi	r27, 0xFF	; 255
     474:	cb 1a       	sub	r12, r27
     476:	db 0a       	sbc	r13, r27
     478:	eb 0a       	sbc	r14, r27
     47a:	fb 0a       	sbc	r15, r27
     47c:	af e0       	ldi	r26, 0x0F	; 15
     47e:	6a 0e       	add	r6, r26
     480:	71 1c       	adc	r7, r1
     482:	a1 85       	ldd	r26, Z+9	; 0x09
     484:	b2 85       	ldd	r27, Z+10	; 0x0a
     486:	ab 2b       	or	r26, r27
     488:	99 f0       	breq	.+38     	; 0x4b0 <sc_timer_start+0x94>
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
     48a:	c8 14       	cp	r12, r8
     48c:	d9 04       	cpc	r13, r9
     48e:	ea 04       	cpc	r14, r10
     490:	fb 04       	cpc	r15, r11
     492:	71 f7       	brne	.-36     	; 0x470 <sc_timer_start+0x54>

			break;
		}
	}

}
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	df 90       	pop	r13
     4a0:	cf 90       	pop	r12
     4a2:	bf 90       	pop	r11
     4a4:	af 90       	pop	r10
     4a6:	9f 90       	pop	r9
     4a8:	8f 90       	pop	r8
     4aa:	7f 90       	pop	r7
     4ac:	6f 90       	pop	r6
     4ae:	08 95       	ret

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {

			/* set timer properties */
			this->timers[i].pt_evid = evid;
     4b0:	52 87       	std	Z+10, r21	; 0x0a
     4b2:	41 87       	std	Z+9, r20	; 0x09
			this->timers[i].time_ms = time_ms;
     4b4:	00 83       	st	Z, r16
     4b6:	11 83       	std	Z+1, r17	; 0x01
     4b8:	22 83       	std	Z+2, r18	; 0x02
     4ba:	33 83       	std	Z+3, r19	; 0x03
			this->timers[i].periodic = periodic;
     4bc:	c4 83       	std	Z+4, r28	; 0x04
			this->timers[i].handle = handle;
     4be:	74 87       	std	Z+12, r23	; 0x0c
     4c0:	63 87       	std	Z+11, r22	; 0x0b
			this->timers[i].service = this;
     4c2:	96 87       	std	Z+14, r25	; 0x0e
     4c4:	85 87       	std	Z+13, r24	; 0x0d

			// reset the elapsed time ...
			this->timers[i].elapsed_time_ms = 0;
     4c6:	15 82       	std	Z+5, r1	; 0x05
     4c8:	16 82       	std	Z+6, r1	; 0x06
     4ca:	17 82       	std	Z+7, r1	; 0x07
     4cc:	10 86       	std	Z+8, r1	; 0x08

			break;
     4ce:	e2 cf       	rjmp	.-60     	; 0x494 <sc_timer_start+0x78>

000004d0 <sc_timer_cancel>:

}


/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	8b 01       	movw	r16, r22

	int i;

	for (i = 0; i < this->timer_count; i++) {
     4da:	dc 01       	movw	r26, r24
     4dc:	4d 91       	ld	r20, X+
     4de:	5d 91       	ld	r21, X+
     4e0:	6d 91       	ld	r22, X+
     4e2:	7c 91       	ld	r23, X
     4e4:	13 97       	sbiw	r26, 0x03	; 3
     4e6:	14 16       	cp	r1, r20
     4e8:	15 06       	cpc	r1, r21
     4ea:	16 06       	cpc	r1, r22
     4ec:	17 06       	cpc	r1, r23
     4ee:	0c f5       	brge	.+66     	; 0x532 <sc_timer_cancel+0x62>
		if (this->timers[i].pt_evid == evid) {
     4f0:	14 96       	adiw	r26, 0x04	; 4
     4f2:	ed 91       	ld	r30, X+
     4f4:	fc 91       	ld	r31, X
     4f6:	15 97       	sbiw	r26, 0x05	; 5
     4f8:	81 85       	ldd	r24, Z+9	; 0x09
     4fa:	92 85       	ldd	r25, Z+10	; 0x0a
     4fc:	80 17       	cp	r24, r16
     4fe:	91 07       	cpc	r25, r17
     500:	e9 f0       	breq	.+58     	; 0x53c <sc_timer_cancel+0x6c>
     502:	9f 01       	movw	r18, r30
     504:	21 5f       	subi	r18, 0xF1	; 241
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	a0 e0       	ldi	r26, 0x00	; 0
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	0b c0       	rjmp	.+22     	; 0x528 <sc_timer_cancel+0x58>
     512:	f9 01       	movw	r30, r18
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	a1 1d       	adc	r26, r1
     518:	b1 1d       	adc	r27, r1
     51a:	21 5f       	subi	r18, 0xF1	; 241
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
     51e:	c1 85       	ldd	r28, Z+9	; 0x09
     520:	d2 85       	ldd	r29, Z+10	; 0x0a
     522:	c0 17       	cp	r28, r16
     524:	d1 07       	cpc	r29, r17
     526:	51 f0       	breq	.+20     	; 0x53c <sc_timer_cancel+0x6c>
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
     528:	84 17       	cp	r24, r20
     52a:	95 07       	cpc	r25, r21
     52c:	a6 07       	cpc	r26, r22
     52e:	b7 07       	cpc	r27, r23
     530:	81 f7       	brne	.-32     	; 0x512 <sc_timer_cancel+0x42>
			this->timers[i].handle = NULL;

			break;
		}
	}
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	08 95       	ret
	int i;

	for (i = 0; i < this->timer_count; i++) {
		if (this->timers[i].pt_evid == evid) {

			this->timers[i].pt_evid = NULL;
     53c:	12 86       	std	Z+10, r1	; 0x0a
     53e:	11 86       	std	Z+9, r1	; 0x09
			this->timers[i].handle = NULL;
     540:	14 86       	std	Z+12, r1	; 0x0c
     542:	13 86       	std	Z+11, r1	; 0x0b

			break;
		}
	}
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <sc_timer_service_init>:

/*! Initializes a timer service with a set of timers. */
void sc_timer_service_init(sc_timer_service_t *tservice,
	sc_timer_t *timers,
	sc_integer count,
	sc_raise_time_event_fp raise_event) {
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	fc 01       	movw	r30, r24

	tservice->timers = timers;
     554:	75 83       	std	Z+5, r23	; 0x05
     556:	64 83       	std	Z+4, r22	; 0x04
	tservice->timer_count = count;
     558:	20 83       	st	Z, r18
     55a:	31 83       	std	Z+1, r19	; 0x01
     55c:	42 83       	std	Z+2, r20	; 0x02
     55e:	53 83       	std	Z+3, r21	; 0x03
	for (int i=0; i<count; i++) {
     560:	12 16       	cp	r1, r18
     562:	13 06       	cpc	r1, r19
     564:	14 06       	cpc	r1, r20
     566:	15 06       	cpc	r1, r21
     568:	4c f4       	brge	.+18     	; 0x57c <sc_timer_service_init+0x2e>
     56a:	db 01       	movw	r26, r22
     56c:	1a 96       	adiw	r26, 0x0a	; 10
     56e:	1c 92       	st	X, r1
     570:	1e 92       	st	-X, r1
     572:	19 97       	sbiw	r26, 0x09	; 9
     574:	1e 96       	adiw	r26, 0x0e	; 14
     576:	9c 93       	st	X, r25
     578:	8e 93       	st	-X, r24
     57a:	1d 97       	sbiw	r26, 0x0d	; 13
		tservice->timers->pt_evid = NULL;
		tservice->timers->service = tservice;
	}

	tservice->raise_event = raise_event;
     57c:	17 83       	std	Z+7, r17	; 0x07
     57e:	06 83       	std	Z+6, r16	; 0x06
}
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	08 95       	ret

00000586 <sc_timer_service_proceed>:


void sc_timer_service_proceed(sc_timer_service_t *this, const sc_integer time_ms) {
     586:	2f 92       	push	r2
     588:	3f 92       	push	r3
     58a:	4f 92       	push	r4
     58c:	5f 92       	push	r5
     58e:	6f 92       	push	r6
     590:	7f 92       	push	r7
     592:	8f 92       	push	r8
     594:	9f 92       	push	r9
     596:	af 92       	push	r10
     598:	bf 92       	push	r11
     59a:	cf 92       	push	r12
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	28 97       	sbiw	r28, 0x08	; 8
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	1c 01       	movw	r2, r24
     5bc:	49 83       	std	Y+1, r20	; 0x01
     5be:	5a 83       	std	Y+2, r21	; 0x02
     5c0:	6b 83       	std	Y+3, r22	; 0x03
     5c2:	7c 83       	std	Y+4, r23	; 0x04

	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
     5c4:	fc 01       	movw	r30, r24
     5c6:	80 80       	ld	r8, Z
     5c8:	91 80       	ldd	r9, Z+1	; 0x01
     5ca:	a2 80       	ldd	r10, Z+2	; 0x02
     5cc:	b3 80       	ldd	r11, Z+3	; 0x03
     5ce:	18 14       	cp	r1, r8
     5d0:	19 04       	cpc	r1, r9
     5d2:	1a 04       	cpc	r1, r10
     5d4:	1b 04       	cpc	r1, r11
     5d6:	0c f0       	brlt	.+2      	; 0x5da <sc_timer_service_proceed+0x54>
     5d8:	7a c0       	rjmp	.+244    	; 0x6ce <sc_timer_service_proceed+0x148>
     5da:	c1 2c       	mov	r12, r1
     5dc:	d1 2c       	mov	r13, r1
     5de:	76 01       	movw	r14, r12
     5e0:	c3 94       	inc	r12
     5e2:	18 86       	std	Y+8, r1	; 0x08
     5e4:	1f 82       	std	Y+7, r1	; 0x07
     5e6:	84 81       	ldd	r24, Z+4	; 0x04
     5e8:	95 81       	ldd	r25, Z+5	; 0x05
     5ea:	13 c0       	rjmp	.+38     	; 0x612 <sc_timer_service_proceed+0x8c>
     5ec:	b7 01       	movw	r22, r14
     5ee:	a6 01       	movw	r20, r12
     5f0:	2f 81       	ldd	r18, Y+7	; 0x07
     5f2:	38 85       	ldd	r19, Y+8	; 0x08
     5f4:	21 5f       	subi	r18, 0xF1	; 241
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
     5f8:	38 87       	std	Y+8, r19	; 0x08
     5fa:	2f 83       	std	Y+7, r18	; 0x07
     5fc:	3f ef       	ldi	r19, 0xFF	; 255
     5fe:	c3 1a       	sub	r12, r19
     600:	d3 0a       	sbc	r13, r19
     602:	e3 0a       	sbc	r14, r19
     604:	f3 0a       	sbc	r15, r19
     606:	48 15       	cp	r20, r8
     608:	59 05       	cpc	r21, r9
     60a:	6a 05       	cpc	r22, r10
     60c:	7b 05       	cpc	r23, r11
     60e:	0c f0       	brlt	.+2      	; 0x612 <sc_timer_service_proceed+0x8c>
     610:	5e c0       	rjmp	.+188    	; 0x6ce <sc_timer_service_proceed+0x148>

		/* ... and process all used. */
		if (this->timers[i].pt_evid != NULL) {
     612:	af 81       	ldd	r26, Y+7	; 0x07
     614:	b8 85       	ldd	r27, Y+8	; 0x08
     616:	a8 0f       	add	r26, r24
     618:	b9 1f       	adc	r27, r25
     61a:	19 96       	adiw	r26, 0x09	; 9
     61c:	2d 91       	ld	r18, X+
     61e:	3c 91       	ld	r19, X
     620:	1a 97       	sbiw	r26, 0x0a	; 10
     622:	3e 83       	std	Y+6, r19	; 0x06
     624:	2d 83       	std	Y+5, r18	; 0x05
     626:	23 2b       	or	r18, r19
     628:	09 f3       	breq	.-62     	; 0x5ec <sc_timer_service_proceed+0x66>

			if (this->timers[i].elapsed_time_ms < this->timers[i].time_ms) {
     62a:	15 96       	adiw	r26, 0x05	; 5
     62c:	4d 90       	ld	r4, X+
     62e:	5d 90       	ld	r5, X+
     630:	6d 90       	ld	r6, X+
     632:	7c 90       	ld	r7, X
     634:	18 97       	sbiw	r26, 0x08	; 8
     636:	0d 91       	ld	r16, X+
     638:	1d 91       	ld	r17, X+
     63a:	2d 91       	ld	r18, X+
     63c:	3c 91       	ld	r19, X
     63e:	13 97       	sbiw	r26, 0x03	; 3
     640:	40 16       	cp	r4, r16
     642:	51 06       	cpc	r5, r17
     644:	62 06       	cpc	r6, r18
     646:	73 06       	cpc	r7, r19
     648:	8c f6       	brge	.-94     	; 0x5ec <sc_timer_service_proceed+0x66>
				this->timers[i].elapsed_time_ms += time_ms;
     64a:	49 81       	ldd	r20, Y+1	; 0x01
     64c:	5a 81       	ldd	r21, Y+2	; 0x02
     64e:	6b 81       	ldd	r22, Y+3	; 0x03
     650:	7c 81       	ldd	r23, Y+4	; 0x04
     652:	44 0e       	add	r4, r20
     654:	55 1e       	adc	r5, r21
     656:	66 1e       	adc	r6, r22
     658:	77 1e       	adc	r7, r23
     65a:	15 96       	adiw	r26, 0x05	; 5
     65c:	4d 92       	st	X+, r4
     65e:	5d 92       	st	X+, r5
     660:	6d 92       	st	X+, r6
     662:	7c 92       	st	X, r7
     664:	18 97       	sbiw	r26, 0x08	; 8

				if (this->timers[i].elapsed_time_ms >= this->timers[i].time_ms) {
     666:	40 16       	cp	r4, r16
     668:	51 06       	cpc	r5, r17
     66a:	62 06       	cpc	r6, r18
     66c:	73 06       	cpc	r7, r19
     66e:	0c f4       	brge	.+2      	; 0x672 <sc_timer_service_proceed+0xec>
     670:	bd cf       	rjmp	.-134    	; 0x5ec <sc_timer_service_proceed+0x66>


/*! Callback that is called when a timer fires. */
static void sc_timer_fired(sc_timer_t *timer) {

	timer->service->raise_event(timer->handle, timer->pt_evid);
     672:	1d 96       	adiw	r26, 0x0d	; 13
     674:	ed 91       	ld	r30, X+
     676:	fc 91       	ld	r31, X
     678:	1e 97       	sbiw	r26, 0x0e	; 14
     67a:	06 80       	ldd	r0, Z+6	; 0x06
     67c:	f7 81       	ldd	r31, Z+7	; 0x07
     67e:	e0 2d       	mov	r30, r0
     680:	6d 81       	ldd	r22, Y+5	; 0x05
     682:	7e 81       	ldd	r23, Y+6	; 0x06
     684:	1b 96       	adiw	r26, 0x0b	; 11
     686:	8d 91       	ld	r24, X+
     688:	9c 91       	ld	r25, X
     68a:	1c 97       	sbiw	r26, 0x0c	; 12
     68c:	09 95       	icall
			if (this->timers[i].elapsed_time_ms < this->timers[i].time_ms) {
				this->timers[i].elapsed_time_ms += time_ms;

				if (this->timers[i].elapsed_time_ms >= this->timers[i].time_ms) {
					sc_timer_fired(&(this->timers[i]));
					if (this->timers[i].periodic) {
     68e:	f1 01       	movw	r30, r2
     690:	84 81       	ldd	r24, Z+4	; 0x04
     692:	95 81       	ldd	r25, Z+5	; 0x05
     694:	ef 81       	ldd	r30, Y+7	; 0x07
     696:	f8 85       	ldd	r31, Y+8	; 0x08
     698:	e8 0f       	add	r30, r24
     69a:	f9 1f       	adc	r31, r25
     69c:	24 81       	ldd	r18, Z+4	; 0x04
     69e:	22 23       	and	r18, r18
     6a0:	81 f0       	breq	.+32     	; 0x6c2 <sc_timer_service_proceed+0x13c>
						this->timers[i].elapsed_time_ms -= this->timers[i].time_ms;
     6a2:	45 81       	ldd	r20, Z+5	; 0x05
     6a4:	56 81       	ldd	r21, Z+6	; 0x06
     6a6:	67 81       	ldd	r22, Z+7	; 0x07
     6a8:	70 85       	ldd	r23, Z+8	; 0x08
     6aa:	00 81       	ld	r16, Z
     6ac:	11 81       	ldd	r17, Z+1	; 0x01
     6ae:	22 81       	ldd	r18, Z+2	; 0x02
     6b0:	33 81       	ldd	r19, Z+3	; 0x03
     6b2:	40 1b       	sub	r20, r16
     6b4:	51 0b       	sbc	r21, r17
     6b6:	62 0b       	sbc	r22, r18
     6b8:	73 0b       	sbc	r23, r19
     6ba:	45 83       	std	Z+5, r20	; 0x05
     6bc:	56 83       	std	Z+6, r21	; 0x06
     6be:	67 83       	std	Z+7, r22	; 0x07
     6c0:	70 87       	std	Z+8, r23	; 0x08
     6c2:	f1 01       	movw	r30, r2
     6c4:	80 80       	ld	r8, Z
     6c6:	91 80       	ldd	r9, Z+1	; 0x01
     6c8:	a2 80       	ldd	r10, Z+2	; 0x02
     6ca:	b3 80       	ldd	r11, Z+3	; 0x03
     6cc:	8f cf       	rjmp	.-226    	; 0x5ec <sc_timer_service_proceed+0x66>
				}
			}
		}
	}

}
     6ce:	28 96       	adiw	r28, 0x08	; 8
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	7f 90       	pop	r7
     6f4:	6f 90       	pop	r6
     6f6:	5f 90       	pop	r5
     6f8:	4f 90       	pop	r4
     6fa:	3f 90       	pop	r3
     6fc:	2f 90       	pop	r2
     6fe:	08 95       	ret

00000700 <state_chart_setTimer>:
#define CYCLE_PERIOD 10 //number of milliseconds that pass between each statechart cycle<br>
static sc_timer_service_t timer_service;
static sc_timer_t timers[MAX_TIMERS];

//! callback implementation for the setting up time events
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
     700:	4f 92       	push	r4
     702:	5f 92       	push	r5
     704:	6f 92       	push	r6
     706:	7f 92       	push	r7
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	db 01       	movw	r26, r22
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
     71c:	c0 90 54 02 	lds	r12, 0x0254
     720:	d0 90 55 02 	lds	r13, 0x0255
     724:	e0 90 56 02 	lds	r14, 0x0256
     728:	f0 90 57 02 	lds	r15, 0x0257
     72c:	1c 14       	cp	r1, r12
     72e:	1d 04       	cpc	r1, r13
     730:	1e 04       	cpc	r1, r14
     732:	1f 04       	cpc	r1, r15
     734:	fc f4       	brge	.+62     	; 0x774 <state_chart_setTimer+0x74>

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {
     736:	c0 91 58 02 	lds	r28, 0x0258
     73a:	d0 91 59 02 	lds	r29, 0x0259
     73e:	69 85       	ldd	r22, Y+9	; 0x09
     740:	7a 85       	ldd	r23, Y+10	; 0x0a
     742:	67 2b       	or	r22, r23
     744:	29 f1       	breq	.+74     	; 0x790 <state_chart_setTimer+0x90>
     746:	fe 01       	movw	r30, r28
     748:	3f 96       	adiw	r30, 0x0f	; 15
     74a:	41 2c       	mov	r4, r1
     74c:	51 2c       	mov	r5, r1
     74e:	32 01       	movw	r6, r4
     750:	43 94       	inc	r4
     752:	0b c0       	rjmp	.+22     	; 0x76a <state_chart_setTimer+0x6a>
     754:	ef 01       	movw	r28, r30
     756:	6f ef       	ldi	r22, 0xFF	; 255
     758:	46 1a       	sub	r4, r22
     75a:	56 0a       	sbc	r5, r22
     75c:	66 0a       	sbc	r6, r22
     75e:	76 0a       	sbc	r7, r22
     760:	3f 96       	adiw	r30, 0x0f	; 15
     762:	a9 84       	ldd	r10, Y+9	; 0x09
     764:	ba 84       	ldd	r11, Y+10	; 0x0a
     766:	ab 28       	or	r10, r11
     768:	99 f0       	breq	.+38     	; 0x790 <state_chart_setTimer+0x90>
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
     76a:	4c 14       	cp	r4, r12
     76c:	5d 04       	cpc	r5, r13
     76e:	6e 04       	cpc	r6, r14
     770:	7f 04       	cpc	r7, r15
     772:	81 f7       	brne	.-32     	; 0x754 <state_chart_setTimer+0x54>
static sc_timer_t timers[MAX_TIMERS];

//! callback implementation for the setting up time events
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
    sc_timer_start(&timer_service, (void*) handle, evid, time_ms, periodic);
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	7f 90       	pop	r7
     788:	6f 90       	pop	r6
     78a:	5f 90       	pop	r5
     78c:	4f 90       	pop	r4
     78e:	08 95       	ret

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {

			/* set timer properties */
			this->timers[i].pt_evid = evid;
     790:	ba 87       	std	Y+10, r27	; 0x0a
     792:	a9 87       	std	Y+9, r26	; 0x09
			this->timers[i].time_ms = time_ms;
     794:	28 83       	st	Y, r18
     796:	39 83       	std	Y+1, r19	; 0x01
     798:	4a 83       	std	Y+2, r20	; 0x02
     79a:	5b 83       	std	Y+3, r21	; 0x03
			this->timers[i].periodic = periodic;
     79c:	0c 83       	std	Y+4, r16	; 0x04
			this->timers[i].handle = handle;
     79e:	9c 87       	std	Y+12, r25	; 0x0c
     7a0:	8b 87       	std	Y+11, r24	; 0x0b
			this->timers[i].service = this;
     7a2:	84 e5       	ldi	r24, 0x54	; 84
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	9e 87       	std	Y+14, r25	; 0x0e
     7a8:	8d 87       	std	Y+13, r24	; 0x0d

			// reset the elapsed time ...
			this->timers[i].elapsed_time_ms = 0;
     7aa:	1d 82       	std	Y+5, r1	; 0x05
     7ac:	1e 82       	std	Y+6, r1	; 0x06
     7ae:	1f 82       	std	Y+7, r1	; 0x07
     7b0:	18 86       	std	Y+8, r1	; 0x08
     7b2:	e0 cf       	rjmp	.-64     	; 0x774 <state_chart_setTimer+0x74>

000007b4 <state_chart_unsetTimer>:
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
    sc_timer_start(&timer_service, (void*) handle, evid, time_ms, periodic);
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	8b 01       	movw	r16, r22
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
     7be:	40 91 54 02 	lds	r20, 0x0254
     7c2:	50 91 55 02 	lds	r21, 0x0255
     7c6:	60 91 56 02 	lds	r22, 0x0256
     7ca:	70 91 57 02 	lds	r23, 0x0257
     7ce:	14 16       	cp	r1, r20
     7d0:	15 06       	cpc	r1, r21
     7d2:	16 06       	cpc	r1, r22
     7d4:	17 06       	cpc	r1, r23
     7d6:	0c f5       	brge	.+66     	; 0x81a <state_chart_unsetTimer+0x66>
		if (this->timers[i].pt_evid == evid) {
     7d8:	e0 91 58 02 	lds	r30, 0x0258
     7dc:	f0 91 59 02 	lds	r31, 0x0259
     7e0:	81 85       	ldd	r24, Z+9	; 0x09
     7e2:	92 85       	ldd	r25, Z+10	; 0x0a
     7e4:	08 17       	cp	r16, r24
     7e6:	19 07       	cpc	r17, r25
     7e8:	e9 f0       	breq	.+58     	; 0x824 <state_chart_unsetTimer+0x70>
     7ea:	9f 01       	movw	r18, r30
     7ec:	21 5f       	subi	r18, 0xF1	; 241
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	0b c0       	rjmp	.+22     	; 0x810 <state_chart_unsetTimer+0x5c>
     7fa:	f9 01       	movw	r30, r18
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	a1 1d       	adc	r26, r1
     800:	b1 1d       	adc	r27, r1
     802:	21 5f       	subi	r18, 0xF1	; 241
     804:	3f 4f       	sbci	r19, 0xFF	; 255
     806:	c1 85       	ldd	r28, Z+9	; 0x09
     808:	d2 85       	ldd	r29, Z+10	; 0x0a
     80a:	0c 17       	cp	r16, r28
     80c:	1d 07       	cpc	r17, r29
     80e:	51 f0       	breq	.+20     	; 0x824 <state_chart_unsetTimer+0x70>
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
     810:	84 17       	cp	r24, r20
     812:	95 07       	cpc	r25, r21
     814:	a6 07       	cpc	r26, r22
     816:	b7 07       	cpc	r27, r23
     818:	81 f7       	brne	.-32     	; 0x7fa <state_chart_unsetTimer+0x46>
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
    sc_timer_cancel(&timer_service, evid);
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret
	int i;

	for (i = 0; i < this->timer_count; i++) {
		if (this->timers[i].pt_evid == evid) {

			this->timers[i].pt_evid = NULL;
     824:	12 86       	std	Z+10, r1	; 0x0a
     826:	11 86       	std	Z+9, r1	; 0x09
			this->timers[i].handle = NULL;
     828:	14 86       	std	Z+12, r1	; 0x0c
     82a:	13 86       	std	Z+11, r1	; 0x0b
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
    sc_timer_cancel(&timer_service, evid);
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <sc_timer_setup>:
void sc_timer_service_init(sc_timer_service_t *tservice,
	sc_timer_t *timers,
	sc_integer count,
	sc_raise_time_event_fp raise_event) {

	tservice->timers = timers;
     836:	88 e2       	ldi	r24, 0x28	; 40
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	90 93 59 02 	sts	0x0259, r25
     83e:	80 93 58 02 	sts	0x0258, r24
	tservice->timer_count = count;
     842:	e4 e5       	ldi	r30, 0x54	; 84
     844:	f2 e0       	ldi	r31, 0x02	; 2
     846:	84 e1       	ldi	r24, 0x14	; 20
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	80 83       	st	Z, r24
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	a2 83       	std	Z+2, r26	; 0x02
     854:	b3 83       	std	Z+3, r27	; 0x03
     856:	10 92 32 01 	sts	0x0132, r1
     85a:	10 92 31 01 	sts	0x0131, r1
     85e:	f0 93 36 01 	sts	0x0136, r31
     862:	e0 93 35 01 	sts	0x0135, r30
	for (int i=0; i<count; i++) {
		tservice->timers->pt_evid = NULL;
		tservice->timers->service = tservice;
	}

	tservice->raise_event = raise_event;
     866:	8f ea       	ldi	r24, 0xAF	; 175
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	90 93 5b 02 	sts	0x025B, r25
     86e:	80 93 5a 02 	sts	0x025A, r24
     872:	08 95       	ret

00000874 <sc_timer_increment>:
								(sc_raise_time_event_fp) &state_chart_raiseTimeEvent);
}


void sc_timer_increment(const sc_integer time_ms)
{
     874:	ab 01       	movw	r20, r22
     876:	bc 01       	movw	r22, r24
	sc_timer_service_proceed(&timer_service, time_ms);
     878:	84 e5       	ldi	r24, 0x54	; 84
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	0c 94 c3 02 	jmp	0x586	; 0x586 <sc_timer_service_proceed>

00000880 <adcInit>:

#include "adc.h"

void adcInit(uint8_t channel) {
	//Make ADC5 an input pin
	DDRC &= ~(1 << channel);
     880:	97 b1       	in	r25, 0x07	; 7
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	01 c0       	rjmp	.+2      	; 0x88a <adcInit+0xa>
     888:	22 0f       	add	r18, r18
     88a:	8a 95       	dec	r24
     88c:	ea f7       	brpl	.-6      	; 0x888 <adcInit+0x8>
     88e:	20 95       	com	r18
     890:	29 23       	and	r18, r25
     892:	27 b9       	out	0x07, r18	; 7

	//Connect channel 5 to ADC (AD5 pin)
	ADMUX |= ((1 << MUX2) | (1 << MUX0));
     894:	ec e7       	ldi	r30, 0x7C	; 124
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	85 60       	ori	r24, 0x05	; 5
     89c:	80 83       	st	Z, r24

	//use AVcc as ref voltage
	ADMUX |= (1 << REFS0);
     89e:	80 81       	ld	r24, Z
     8a0:	80 64       	ori	r24, 0x40	; 64
     8a2:	80 83       	st	Z, r24

	//8 bit result
	ADMUX |= (1 << ADLAR);
     8a4:	80 81       	ld	r24, Z
     8a6:	80 62       	ori	r24, 0x20	; 32
     8a8:	80 83       	st	Z, r24

	//128 prescale = 125kHz ADC clock
	ADCSRA |= ((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
     8aa:	ea e7       	ldi	r30, 0x7A	; 122
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	87 60       	ori	r24, 0x07	; 7
     8b2:	80 83       	st	Z, r24

	//switch on ADC
	ADCSRA |= (1 << ADEN);
     8b4:	80 81       	ld	r24, Z
     8b6:	80 68       	ori	r24, 0x80	; 128
     8b8:	80 83       	st	Z, r24
     8ba:	08 95       	ret

000008bc <adcRead>:
}

uint16_t adcRead(void) {
	uint16_t adcResult;
	//start conversion
	ADCSRA |= (1 << ADSC);
     8bc:	80 91 7a 00 	lds	r24, 0x007A
     8c0:	80 64       	ori	r24, 0x40	; 64
     8c2:	80 93 7a 00 	sts	0x007A, r24

	//wait for ADC to complete
	//wait until ADSC bit goes low
	while (ADCSRA & (1 << ADSC)) {
     8c6:	80 91 7a 00 	lds	r24, 0x007A
     8ca:	86 fd       	sbrc	r24, 6
     8cc:	fc cf       	rjmp	.-8      	; 0x8c6 <adcRead+0xa>

	}

	//ADC is complete - grab result...
	adcResult = ADCH;
     8ce:	80 91 79 00 	lds	r24, 0x0079
	return adcResult;
}
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	08 95       	ret

000008d6 <keypadSetupPins>:
 * setting up the keypad pins in arduino
 */
void keypadSetupPins(void) {

	//setting column pins as output pins
	COL_DIR |= ((1 << COL_1_PIN) | (1 << COL_2_PIN) | (1 << COL_3_PIN));
     8d6:	84 b1       	in	r24, 0x04	; 4
     8d8:	8c 61       	ori	r24, 0x1C	; 28
     8da:	84 b9       	out	0x04, r24	; 4

	//setting row pins as input pins
	ROW_DIR &= ~((1 << ROW_1_PIN) | (1 << ROW_2_PIN) | (1 << ROW_3_PIN)
     8dc:	87 b1       	in	r24, 0x07	; 7
     8de:	80 7f       	andi	r24, 0xF0	; 240
     8e0:	87 b9       	out	0x07, r24	; 7
			| (1 << ROW_4_PIN));

	//enable pull-up resistors on row pins
	ROW_PORT |= ((1 << ROW_1_PIN) | (1 << ROW_2_PIN) | (1 << ROW_3_PIN)
     8e2:	88 b1       	in	r24, 0x08	; 8
     8e4:	8f 60       	ori	r24, 0x0F	; 15
     8e6:	88 b9       	out	0x08, r24	; 8
			| (1 << ROW_4_PIN));

    //initializing column ports with 0's
	COL_PORT &= ~((1<<COL_1_PIN)|(1<<COL_2_PIN)|(1<<COL_3_PIN));
     8e8:	85 b1       	in	r24, 0x05	; 5
     8ea:	83 7e       	andi	r24, 0xE3	; 227
     8ec:	85 b9       	out	0x05, r24	; 5
     8ee:	08 95       	ret

000008f0 <keypadGetKeyPressed>:
char keypadGetKeyPressed(void) {

	char retVal = 0;

	//sending 011 on columns
	COL_PORT &= ~(1 << COL_1_PIN); //send  0 on column 1
     8f0:	2a 98       	cbi	0x05, 2	; 5
	COL_PORT |= ((1 << COL_2_PIN) | (1 << COL_3_PIN)); //send 1's on column 2 and 3
     8f2:	85 b1       	in	r24, 0x05	; 5
     8f4:	88 61       	ori	r24, 0x18	; 24
     8f6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f8:	85 e0       	ldi	r24, 0x05	; 5
     8fa:	8a 95       	dec	r24
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <keypadGetKeyPressed+0xa>
     8fe:	00 00       	nop

	//adding delay so that values get propagated to the hardware
	_delay_us(1);

	//testing column 1 row 1
	if (!(ROW_INPUT & (1 << ROW_1_PIN))) {
     900:	30 9b       	sbis	0x06, 0	; 6
     902:	31 c0       	rjmp	.+98     	; 0x966 <__stack+0x67>
 * Returns 0 if no key pressed and returns ascii code if key pressed.
 * Sets all the cols to low when done.
 */
char keypadGetKeyPressed(void) {

	char retVal = 0;
     904:	80 e0       	ldi	r24, 0x00	; 0
		//there is a 0 on row pin indicating key 1 is pressed
		retVal = '1';
	}

	//testing column 1 row 2
	if (!(ROW_INPUT & (1 << ROW_2_PIN))) {
     906:	31 9b       	sbis	0x06, 1	; 6
		//there is a 0 on row pin indicating key 4 is pressed
		retVal = '4';
     908:	84 e3       	ldi	r24, 0x34	; 52
	}

	//testing column 1 row 3
	if (!(ROW_INPUT & (1 << ROW_3_PIN))) {
     90a:	32 9b       	sbis	0x06, 2	; 6
		//there is a 0 on row pin indicating key 7 is pressed
		retVal = '7';
     90c:	87 e3       	ldi	r24, 0x37	; 55
	}

	//testing column 1 row 4
	if (!(ROW_INPUT & (1 << ROW_4_PIN))) {
     90e:	33 9b       	sbis	0x06, 3	; 6
		//there is a 0 on row pin indicating key * is pressed
		retVal = '*';
     910:	8a e2       	ldi	r24, 0x2A	; 42
	}

	COL_PORT &= ~((1 << COL_2_PIN) | (1 << COL_3_PIN));//setting the column ports back to zero
     912:	95 b1       	in	r25, 0x05	; 5
     914:	97 7e       	andi	r25, 0xE7	; 231
     916:	95 b9       	out	0x05, r25	; 5

	//sending 101 on columns
	COL_PORT &= ~(1 << COL_2_PIN); //send  0 on column 2
     918:	2b 98       	cbi	0x05, 3	; 5
	COL_PORT |= ((1 << COL_1_PIN) | (1 << COL_3_PIN)); //send 1's on column 1 and 3
     91a:	95 b1       	in	r25, 0x05	; 5
     91c:	94 61       	ori	r25, 0x14	; 20
     91e:	95 b9       	out	0x05, r25	; 5
     920:	95 e0       	ldi	r25, 0x05	; 5
     922:	9a 95       	dec	r25
     924:	f1 f7       	brne	.-4      	; 0x922 <__stack+0x23>
     926:	00 00       	nop

	//adding delay so that values get propagated to the hardware
	_delay_us(1);

	//testing column 2 row 1
	if (!(ROW_INPUT & (1 << ROW_1_PIN))) {
     928:	30 9b       	sbis	0x06, 0	; 6
		//there is a 0 on row pin indicating key 2 is pressed
		retVal = '2';
     92a:	82 e3       	ldi	r24, 0x32	; 50
	}

	//testing column 2 row 2
	if (!(ROW_INPUT & (1 << ROW_2_PIN))) {
     92c:	31 9b       	sbis	0x06, 1	; 6
		//there is a 0 on row pin indicating key 5 is pressed
		retVal = '5';
     92e:	85 e3       	ldi	r24, 0x35	; 53
	}

	//testing column 2 row 3
	if (!(ROW_INPUT & (1 << ROW_3_PIN))) {
     930:	32 9b       	sbis	0x06, 2	; 6
		//there is a 0 on row pin indicating key 8 is pressed
		retVal = '8';
     932:	88 e3       	ldi	r24, 0x38	; 56
	}

	//testing column 2 row 4
	if (!(ROW_INPUT & (1 << ROW_4_PIN))) {
     934:	33 9b       	sbis	0x06, 3	; 6
		//there is a 0 on row pin indicating key 0 is pressed
		retVal = '0';
     936:	80 e3       	ldi	r24, 0x30	; 48
	}

	COL_PORT &= ~((1 << COL_1_PIN) | (1 << COL_3_PIN));//setting the column ports back to zero
     938:	95 b1       	in	r25, 0x05	; 5
     93a:	9b 7e       	andi	r25, 0xEB	; 235
     93c:	95 b9       	out	0x05, r25	; 5

	//sending 110 on columns
	COL_PORT &= ~(1 << COL_3_PIN); //send  0 on column 3
     93e:	2c 98       	cbi	0x05, 4	; 5
	COL_PORT |= ((1 << COL_1_PIN) | (1 << COL_2_PIN)); //send 1's on column 2 and 3
     940:	95 b1       	in	r25, 0x05	; 5
     942:	9c 60       	ori	r25, 0x0C	; 12
     944:	95 b9       	out	0x05, r25	; 5
     946:	95 e0       	ldi	r25, 0x05	; 5
     948:	9a 95       	dec	r25
     94a:	f1 f7       	brne	.-4      	; 0x948 <__stack+0x49>
     94c:	00 00       	nop

	//adding delay so that values get propagated to the hardware
	_delay_us(1);

	//testing column 3 row 1
	if (!(ROW_INPUT & (1 << ROW_1_PIN))) {
     94e:	30 9b       	sbis	0x06, 0	; 6
		//there is a 0 on row pin indicating key 3 is pressed
		retVal = '3';
     950:	83 e3       	ldi	r24, 0x33	; 51
	}

	//testing column 3 row 2
	if (!(ROW_INPUT & (1 << ROW_2_PIN))) {
     952:	31 9b       	sbis	0x06, 1	; 6
		//there is a 0 on row pin indicating key 6 is pressed
		retVal = '6';
     954:	86 e3       	ldi	r24, 0x36	; 54
	}

	//testing column 3 row 3
	if (!(ROW_INPUT & (1 << ROW_3_PIN))) {
     956:	32 9b       	sbis	0x06, 2	; 6
		//there is a 0 on row pin indicating key 9 is pressed
		retVal = '9';
     958:	89 e3       	ldi	r24, 0x39	; 57
	}

	//testing column 3 row 4
	if (!(ROW_INPUT & (1 << ROW_4_PIN))) {
     95a:	33 9b       	sbis	0x06, 3	; 6
		//there is a 0 on row pin indicating key # is pressed
		retVal = '#';
     95c:	83 e2       	ldi	r24, 0x23	; 35
	}

	COL_PORT &= ~((1 << COL_1_PIN) | (1 << COL_2_PIN)); //setting the column ports back to zero
     95e:	95 b1       	in	r25, 0x05	; 5
     960:	93 7f       	andi	r25, 0xF3	; 243
     962:	95 b9       	out	0x05, r25	; 5

	return retVal;

}
     964:	08 95       	ret
	_delay_us(1);

	//testing column 1 row 1
	if (!(ROW_INPUT & (1 << ROW_1_PIN))) {
		//there is a 0 on row pin indicating key 1 is pressed
		retVal = '1';
     966:	81 e3       	ldi	r24, 0x31	; 49
     968:	ce cf       	rjmp	.-100    	; 0x906 <__stack+0x7>

0000096a <ledsInit>:

	#include <avr/io.h>
	#include "leds.h"

	void ledsInit(void) {
		DDRB |= (1 << 5);
     96a:	25 9a       	sbi	0x04, 5	; 4
     96c:	08 95       	ret

0000096e <ledOn>:

	}
	void ledOn(void) {
		PORTB |= (1 << 5);
     96e:	2d 9a       	sbi	0x05, 5	; 5
     970:	08 95       	ret

00000972 <ledOff>:
	}
	void ledOff(void) {
		PORTB &= ~(1 << 5);
     972:	2d 98       	cbi	0x05, 5	; 5
     974:	08 95       	ret

00000976 <main>:
#define LDR_THRESHOLD 100
#define ADC_CHANNEL 5

static State_chart sc;

int main(void) {
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	00 d0       	rcall	.+0      	; 0x97c <main+0x6>
     97c:	00 d0       	rcall	.+0      	; 0x97e <main+0x8>
     97e:	1f 92       	push	r1
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62

	millisInit();
     984:	0e 94 a3 05 	call	0xb46	; 0xb46 <millisInit>
	keypadSetupPins();
     988:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <keypadSetupPins>
	usartInit();
     98c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <usartInit>
	adcInit(ADC_CHANNEL);
     990:	85 e0       	ldi	r24, 0x05	; 5
     992:	0e 94 40 04 	call	0x880	; 0x880 <adcInit>

	sc_timer_setup();  //setup the statechart timers
     996:	0e 94 1b 04 	call	0x836	; 0x836 <sc_timer_setup>
	state_chart_init(&sc); //initialize statechart
     99a:	8e e5       	ldi	r24, 0x5E	; 94
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	0e 94 a0 00 	call	0x140	; 0x140 <state_chart_init>
	state_chart_enter(&sc); //enter the statechart
     9a2:	8e e5       	ldi	r24, 0x5E	; 94
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 ac 00 	call	0x158	; 0x158 <state_chart_enter>
	char array[5];
	static char keypressed, oldkeypressed = 0;			//initializing variables
	uint16_t adcOut;
	bool keyModeActive = false;

	DDRB |= (1 << 5);
     9aa:	25 9a       	sbi	0x04, 5	; 4
	uint32_t nextScanTime = millis() + KEY_SCAN_INTERVAL;
     9ac:	0e 94 ba 05 	call	0xb74	; 0xb74 <millis>
     9b0:	6b 01       	movw	r12, r22
     9b2:	7c 01       	movw	r14, r24
     9b4:	84 e1       	ldi	r24, 0x14	; 20
     9b6:	c8 0e       	add	r12, r24
     9b8:	d1 1c       	adc	r13, r1
     9ba:	e1 1c       	adc	r14, r1
     9bc:	f1 1c       	adc	r15, r1
	state_chart_enter(&sc); //enter the statechart

	char array[5];
	static char keypressed, oldkeypressed = 0;			//initializing variables
	uint16_t adcOut;
	bool keyModeActive = false;
     9be:	71 2c       	mov	r7, r1
     9c0:	8e 01       	movw	r16, r28
     9c2:	0f 5f       	subi	r16, 0xFF	; 255
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
					keyModeActive = false;
					state_chartIface_raise_key_off(&sc);
				}

				else if (keypressed == '3') {
					keyModeActive = !keyModeActive;
     9c6:	55 24       	eor	r5, r5
     9c8:	53 94       	inc	r5

		}

		if (keyModeActive) {
		 usartSendString(" LDR Threshold is ");
		 sprintf(array, "%i", LDR_THRESHOLD);
     9ca:	84 e6       	ldi	r24, 0x64	; 100
     9cc:	68 2e       	mov	r6, r24
     9ce:	93 e1       	ldi	r25, 0x13	; 19
     9d0:	a9 2e       	mov	r10, r25
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	b9 2e       	mov	r11, r25
     9d6:	0c c0       	rjmp	.+24     	; 0x9f0 <main+0x7a>
			oldkeypressed = keypressed;
			nextScanTime = millis() + KEY_SCAN_INTERVAL;

		}

		if (keyModeActive) {
     9d8:	71 10       	cpse	r7, r1
     9da:	39 c0       	rjmp	.+114    	; 0xa4e <main+0xd8>
			usartSendString(array);
			usartSendChar('\n');

		}
*/
		sc_timer_increment(20);
     9dc:	64 e1       	ldi	r22, 0x14	; 20
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 3a 04 	call	0x874	; 0x874 <sc_timer_increment>
		state_chart_runCycle(&sc);
     9e8:	8e e5       	ldi	r24, 0x5E	; 94
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <state_chart_runCycle>
	DDRB |= (1 << 5);
	uint32_t nextScanTime = millis() + KEY_SCAN_INTERVAL;

	while (1) {

		sleep_mode()
     9f0:	83 b7       	in	r24, 0x33	; 51
     9f2:	81 60       	ori	r24, 0x01	; 1
     9f4:	83 bf       	out	0x33, r24	; 51
     9f6:	88 95       	sleep
     9f8:	83 b7       	in	r24, 0x33	; 51
     9fa:	8e 7f       	andi	r24, 0xFE	; 254
     9fc:	83 bf       	out	0x33, r24	; 51
		;

		if (millis() >= nextScanTime) {
     9fe:	0e 94 ba 05 	call	0xb74	; 0xb74 <millis>
     a02:	6c 15       	cp	r22, r12
     a04:	7d 05       	cpc	r23, r13
     a06:	8e 05       	cpc	r24, r14
     a08:	9f 05       	cpc	r25, r15
     a0a:	30 f3       	brcs	.-52     	; 0x9d8 <main+0x62>

			keypressed = keypadGetKeyPressed();
     a0c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <keypadGetKeyPressed>
     a10:	80 93 5d 02 	sts	0x025D, r24

			if ((keypressed != 0) && (keypressed != oldkeypressed)) {
     a14:	88 23       	and	r24, r24
     a16:	09 f4       	brne	.+2      	; 0xa1a <main+0xa4>
     a18:	4c c0       	rjmp	.+152    	; 0xab2 <main+0x13c>
     a1a:	90 91 5c 02 	lds	r25, 0x025C
     a1e:	89 17       	cp	r24, r25
     a20:	49 f0       	breq	.+18     	; 0xa34 <main+0xbe>
				if (keypressed == '1') {
     a22:	81 33       	cpi	r24, 0x31	; 49
     a24:	09 f4       	brne	.+2      	; 0xa28 <main+0xb2>
     a26:	4c c0       	rjmp	.+152    	; 0xac0 <main+0x14a>
					keyModeActive = false;
					state_chartIface_raise_key_on(&sc);
				}

				else if (keypressed == '2') {
     a28:	82 33       	cpi	r24, 0x32	; 50
     a2a:	09 f4       	brne	.+2      	; 0xa2e <main+0xb8>
     a2c:	51 c0       	rjmp	.+162    	; 0xad0 <main+0x15a>
					keyModeActive = false;
					state_chartIface_raise_key_off(&sc);
				}

				else if (keypressed == '3') {
     a2e:	83 33       	cpi	r24, 0x33	; 51
     a30:	09 f4       	brne	.+2      	; 0xa34 <main+0xbe>
     a32:	56 c0       	rjmp	.+172    	; 0xae0 <main+0x16a>
					keyModeActive = !keyModeActive;
					state_chartIface_raise_key_mode(&sc);
				}
			}

			oldkeypressed = keypressed;
     a34:	80 93 5c 02 	sts	0x025C, r24
			nextScanTime = millis() + KEY_SCAN_INTERVAL;
     a38:	0e 94 ba 05 	call	0xb74	; 0xb74 <millis>
     a3c:	6b 01       	movw	r12, r22
     a3e:	7c 01       	movw	r14, r24
     a40:	94 e1       	ldi	r25, 0x14	; 20
     a42:	c9 0e       	add	r12, r25
     a44:	d1 1c       	adc	r13, r1
     a46:	e1 1c       	adc	r14, r1
     a48:	f1 1c       	adc	r15, r1

		}

		if (keyModeActive) {
     a4a:	77 20       	and	r7, r7
     a4c:	39 f2       	breq	.-114    	; 0x9dc <main+0x66>
		 usartSendString(" LDR Threshold is ");
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	0e 94 de 05 	call	0xbbc	; 0xbbc <usartSendString>
		 sprintf(array, "%i", LDR_THRESHOLD);
     a56:	1f 92       	push	r1
     a58:	6f 92       	push	r6
     a5a:	bf 92       	push	r11
     a5c:	af 92       	push	r10
     a5e:	1f 93       	push	r17
     a60:	0f 93       	push	r16
     a62:	0e 94 00 06 	call	0xc00	; 0xc00 <sprintf>
		 usartSendString(array);
     a66:	c8 01       	movw	r24, r16
     a68:	0e 94 de 05 	call	0xbbc	; 0xbbc <usartSendString>
		 usartSendChar('\n');
     a6c:	8a e0       	ldi	r24, 0x0A	; 10
     a6e:	0e 94 d7 05 	call	0xbae	; 0xbae <usartSendChar>
		 adcOut = adcRead();
     a72:	0e 94 5e 04 	call	0x8bc	; 0x8bc <adcRead>
     a76:	4c 01       	movw	r8, r24
		 usartSendString(" Value from ADC ");
     a78:	86 e1       	ldi	r24, 0x16	; 22
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 de 05 	call	0xbbc	; 0xbbc <usartSendString>
		 sprintf(array, "%i", adcOut);
     a80:	9f 92       	push	r9
     a82:	8f 92       	push	r8
     a84:	bf 92       	push	r11
     a86:	af 92       	push	r10
     a88:	1f 93       	push	r17
     a8a:	0f 93       	push	r16
     a8c:	0e 94 00 06 	call	0xc00	; 0xc00 <sprintf>
		 usartSendString(array);
     a90:	c8 01       	movw	r24, r16
     a92:	0e 94 de 05 	call	0xbbc	; 0xbbc <usartSendString>
		 if (adcOut < LDR_THRESHOLD) {
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	94 e6       	ldi	r25, 0x64	; 100
     aa2:	89 16       	cp	r8, r25
     aa4:	91 04       	cpc	r9, r1
     aa6:	38 f4       	brcc	.+14     	; 0xab6 <main+0x140>
		 state_chartIface_raise_dark(&sc);
     aa8:	8e e5       	ldi	r24, 0x5E	; 94
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	0e 94 06 02 	call	0x40c	; 0x40c <state_chartIface_raise_dark>
     ab0:	95 cf       	rjmp	.-214    	; 0x9dc <main+0x66>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	bf cf       	rjmp	.-130    	; 0xa34 <main+0xbe>

		 } else {
		 state_chartIface_raise_bright(&sc);
     ab6:	8e e5       	ldi	r24, 0x5E	; 94
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 0a 02 	call	0x414	; 0x414 <state_chartIface_raise_bright>
     abe:	8e cf       	rjmp	.-228    	; 0x9dc <main+0x66>
			keypressed = keypadGetKeyPressed();

			if ((keypressed != 0) && (keypressed != oldkeypressed)) {
				if (keypressed == '1') {
					keyModeActive = false;
					state_chartIface_raise_key_on(&sc);
     ac0:	8e e5       	ldi	r24, 0x5E	; 94
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <state_chartIface_raise_key_on>
     ac8:	80 91 5d 02 	lds	r24, 0x025D

			keypressed = keypadGetKeyPressed();

			if ((keypressed != 0) && (keypressed != oldkeypressed)) {
				if (keypressed == '1') {
					keyModeActive = false;
     acc:	71 2c       	mov	r7, r1
     ace:	b2 cf       	rjmp	.-156    	; 0xa34 <main+0xbe>
					state_chartIface_raise_key_on(&sc);
				}

				else if (keypressed == '2') {
					keyModeActive = false;
					state_chartIface_raise_key_off(&sc);
     ad0:	8e e5       	ldi	r24, 0x5E	; 94
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <state_chartIface_raise_key_off>
     ad8:	80 91 5d 02 	lds	r24, 0x025D
					keyModeActive = false;
					state_chartIface_raise_key_on(&sc);
				}

				else if (keypressed == '2') {
					keyModeActive = false;
     adc:	71 2c       	mov	r7, r1
     ade:	aa cf       	rjmp	.-172    	; 0xa34 <main+0xbe>
					state_chartIface_raise_key_off(&sc);
				}

				else if (keypressed == '3') {
					keyModeActive = !keyModeActive;
     ae0:	75 24       	eor	r7, r5
					state_chartIface_raise_key_mode(&sc);
     ae2:	8e e5       	ldi	r24, 0x5E	; 94
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	0e 94 02 02 	call	0x404	; 0x404 <state_chartIface_raise_key_mode>
     aea:	80 91 5d 02 	lds	r24, 0x025D
     aee:	a2 cf       	rjmp	.-188    	; 0xa34 <main+0xbe>

00000af0 <state_chartIface_setLight>:
}

//Functions from State_chartRequired.h
void state_chartIface_setLight(const State_chart* handle,
		const sc_boolean lightOn) {
	if (lightOn)
     af0:	61 11       	cpse	r22, r1
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <state_chartIface_setLight+0x8>
		PORTB |= (1 << 5);
	else
		PORTB &= ~(1 << 5);
     af4:	2d 98       	cbi	0x05, 5	; 5
     af6:	08 95       	ret

//Functions from State_chartRequired.h
void state_chartIface_setLight(const State_chart* handle,
		const sc_boolean lightOn) {
	if (lightOn)
		PORTB |= (1 << 5);
     af8:	2d 9a       	sbi	0x05, 5	; 5
     afa:	08 95       	ret

00000afc <__vector_14>:
static uint32_t elapsedMillis;

/*
 *ISR for timer compare register
 */
ISR(TIMER0_COMPA_vect) {
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
	//static variable in isr 'lastISRRunTime'. if diff is less than 20ms , do nothing
	elapsedMillis++;
     b0e:	80 91 68 02 	lds	r24, 0x0268
     b12:	90 91 69 02 	lds	r25, 0x0269
     b16:	a0 91 6a 02 	lds	r26, 0x026A
     b1a:	b0 91 6b 02 	lds	r27, 0x026B
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	a1 1d       	adc	r26, r1
     b22:	b1 1d       	adc	r27, r1
     b24:	80 93 68 02 	sts	0x0268, r24
     b28:	90 93 69 02 	sts	0x0269, r25
     b2c:	a0 93 6a 02 	sts	0x026A, r26
     b30:	b0 93 6b 02 	sts	0x026B, r27
}
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	0f 90       	pop	r0
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	0f 90       	pop	r0
     b42:	1f 90       	pop	r1
     b44:	18 95       	reti

00000b46 <millisInit>:
 * Load the OCR0A with the correct value
 * Initialise elapsedMillis to zero.
 * Set correct prescale and start timer.
 */
void millisInit(void) {
	elapsedMillis=0;
     b46:	10 92 68 02 	sts	0x0268, r1
     b4a:	10 92 69 02 	sts	0x0269, r1
     b4e:	10 92 6a 02 	sts	0x026A, r1
     b52:	10 92 6b 02 	sts	0x026B, r1
	TCCR0A |= (1 << WGM01); // Configure timer 0 for CTC mode
     b56:	84 b5       	in	r24, 0x24	; 36
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A); // Enable CTC interrupt
     b5c:	ee e6       	ldi	r30, 0x6E	; 110
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	82 60       	ori	r24, 0x02	; 2
     b64:	80 83       	st	Z, r24
	sei();// Enable global interrupts
     b66:	78 94       	sei
	OCR0A = 249; // Set CTC compare value to 1000Hz at 16 MHz AVR clock , with a prescaler of 64
     b68:	89 ef       	ldi	r24, 0xF9	; 249
     b6a:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= ((1 << CS01) | (1 << CS00)); // Start timer at Fcpu /64
     b6c:	85 b5       	in	r24, 0x25	; 37
     b6e:	83 60       	ori	r24, 0x03	; 3
     b70:	85 bd       	out	0x25, r24	; 37
     b72:	08 95       	ret

00000b74 <millis>:
	 * uint32_t elapsedMillis count variable?
	 * Do you need to do anything to ensure this function works correctly in
	 * that case?
	 */
	 uint32_t localmillis;
	 cli();
     b74:	f8 94       	cli
	 localmillis = elapsedMillis;
     b76:	60 91 68 02 	lds	r22, 0x0268
     b7a:	70 91 69 02 	lds	r23, 0x0269
     b7e:	80 91 6a 02 	lds	r24, 0x026A
     b82:	90 91 6b 02 	lds	r25, 0x026B
	 sei();
     b86:	78 94       	sei
	 return localmillis;
}
     b88:	08 95       	ret

00000b8a <usartInit>:

#include "usart.h"

void usartInit(void)
{
	UCSR0B |= ((1<<RXEN0) | (1<<TXEN0));
     b8a:	e1 ec       	ldi	r30, 0xC1	; 193
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 61       	ori	r24, 0x18	; 24
     b92:	80 83       	st	Z, r24

	UBRR0 = 0x68;
     b94:	88 e6       	ldi	r24, 0x68	; 104
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	90 93 c5 00 	sts	0x00C5, r25
     b9c:	80 93 c4 00 	sts	0x00C4, r24
     ba0:	08 95       	ret

00000ba2 <usartEnableRxInt>:
}

void usartEnableRxInt(void)
{
	UCSR0B |= (1<<RXCIE0);
     ba2:	e1 ec       	ldi	r30, 0xC1	; 193
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	80 68       	ori	r24, 0x80	; 128
     baa:	80 83       	st	Z, r24
     bac:	08 95       	ret

00000bae <usartSendChar>:
}

void usartSendChar(char c)
{
	while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     bae:	90 91 c0 00 	lds	r25, 0x00C0
     bb2:	95 ff       	sbrs	r25, 5
     bb4:	fc cf       	rjmp	.-8      	; 0xbae <usartSendChar>
	UDR0 = c;
     bb6:	80 93 c6 00 	sts	0x00C6, r24
     bba:	08 95       	ret

00000bbc <usartSendString>:

void usartSendString(char string[])
{
	uint8_t i = 0;

	while(string[i] != '\0')
     bbc:	fc 01       	movw	r30, r24
     bbe:	30 81       	ld	r19, Z
     bc0:	33 23       	and	r19, r19
     bc2:	71 f0       	breq	.+28     	; 0xbe0 <usartSendString+0x24>
	UDR0 = c;
}

void usartSendString(char string[])
{
	uint8_t i = 0;
     bc4:	40 e0       	ldi	r20, 0x00	; 0

	while(string[i] != '\0')
	{
		usartSendChar(string[i++]);
     bc6:	4f 5f       	subi	r20, 0xFF	; 255
	UCSR0B |= (1<<RXCIE0);
}

void usartSendChar(char c)
{
	while ((UCSR0A & (1 << UDRE0)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
     bc8:	20 91 c0 00 	lds	r18, 0x00C0
     bcc:	25 ff       	sbrs	r18, 5
     bce:	fc cf       	rjmp	.-8      	; 0xbc8 <usartSendString+0xc>
	UDR0 = c;
     bd0:	30 93 c6 00 	sts	0x00C6, r19

void usartSendString(char string[])
{
	uint8_t i = 0;

	while(string[i] != '\0')
     bd4:	fc 01       	movw	r30, r24
     bd6:	e4 0f       	add	r30, r20
     bd8:	f1 1d       	adc	r31, r1
     bda:	30 81       	ld	r19, Z
     bdc:	31 11       	cpse	r19, r1
     bde:	f3 cf       	rjmp	.-26     	; 0xbc6 <usartSendString+0xa>
     be0:	08 95       	ret

00000be2 <usartCharReceived>:

uint8_t usartCharReceived(void)
{
	uint8_t retVal = 0;

	if(UCSR0A & (1 << RXC0))
     be2:	80 91 c0 00 	lds	r24, 0x00C0
	{
		retVal = 1;
	}

	return retVal;
}
     be6:	88 1f       	adc	r24, r24
     be8:	88 27       	eor	r24, r24
     bea:	88 1f       	adc	r24, r24
     bec:	08 95       	ret

00000bee <usartReadChar>:

char usartReadChar(void)
{
	return UDR0;
     bee:	80 91 c6 00 	lds	r24, 0x00C6
}
     bf2:	08 95       	ret

00000bf4 <__tablejump2__>:
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31

00000bf8 <__tablejump__>:
     bf8:	05 90       	lpm	r0, Z+
     bfa:	f4 91       	lpm	r31, Z
     bfc:	e0 2d       	mov	r30, r0
     bfe:	09 94       	ijmp

00000c00 <sprintf>:
     c00:	ae e0       	ldi	r26, 0x0E	; 14
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e6 e0       	ldi	r30, 0x06	; 6
     c06:	f6 e0       	ldi	r31, 0x06	; 6
     c08:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__prologue_saves__+0x1c>
     c0c:	0d 89       	ldd	r16, Y+21	; 0x15
     c0e:	1e 89       	ldd	r17, Y+22	; 0x16
     c10:	86 e0       	ldi	r24, 0x06	; 6
     c12:	8c 83       	std	Y+4, r24	; 0x04
     c14:	1a 83       	std	Y+2, r17	; 0x02
     c16:	09 83       	std	Y+1, r16	; 0x01
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	9f e7       	ldi	r25, 0x7F	; 127
     c1c:	9e 83       	std	Y+6, r25	; 0x06
     c1e:	8d 83       	std	Y+5, r24	; 0x05
     c20:	ae 01       	movw	r20, r28
     c22:	47 5e       	subi	r20, 0xE7	; 231
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
     c26:	6f 89       	ldd	r22, Y+23	; 0x17
     c28:	78 8d       	ldd	r23, Y+24	; 0x18
     c2a:	ce 01       	movw	r24, r28
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	0e 94 22 06 	call	0xc44	; 0xc44 <vfprintf>
     c32:	ef 81       	ldd	r30, Y+7	; 0x07
     c34:	f8 85       	ldd	r31, Y+8	; 0x08
     c36:	e0 0f       	add	r30, r16
     c38:	f1 1f       	adc	r31, r17
     c3a:	10 82       	st	Z, r1
     c3c:	2e 96       	adiw	r28, 0x0e	; 14
     c3e:	e4 e0       	ldi	r30, 0x04	; 4
     c40:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__epilogue_restores__+0x1c>

00000c44 <vfprintf>:
     c44:	ac e0       	ldi	r26, 0x0C	; 12
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 e2       	ldi	r30, 0x28	; 40
     c4a:	f6 e0       	ldi	r31, 0x06	; 6
     c4c:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__prologue_saves__>
     c50:	7c 01       	movw	r14, r24
     c52:	6b 01       	movw	r12, r22
     c54:	8a 01       	movw	r16, r20
     c56:	fc 01       	movw	r30, r24
     c58:	17 82       	std	Z+7, r1	; 0x07
     c5a:	16 82       	std	Z+6, r1	; 0x06
     c5c:	83 81       	ldd	r24, Z+3	; 0x03
     c5e:	81 ff       	sbrs	r24, 1
     c60:	bd c1       	rjmp	.+890    	; 0xfdc <vfprintf+0x398>
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	4c 01       	movw	r8, r24
     c68:	f7 01       	movw	r30, r14
     c6a:	93 81       	ldd	r25, Z+3	; 0x03
     c6c:	f6 01       	movw	r30, r12
     c6e:	93 fd       	sbrc	r25, 3
     c70:	85 91       	lpm	r24, Z+
     c72:	93 ff       	sbrs	r25, 3
     c74:	81 91       	ld	r24, Z+
     c76:	6f 01       	movw	r12, r30
     c78:	88 23       	and	r24, r24
     c7a:	09 f4       	brne	.+2      	; 0xc7e <vfprintf+0x3a>
     c7c:	ab c1       	rjmp	.+854    	; 0xfd4 <vfprintf+0x390>
     c7e:	85 32       	cpi	r24, 0x25	; 37
     c80:	39 f4       	brne	.+14     	; 0xc90 <vfprintf+0x4c>
     c82:	93 fd       	sbrc	r25, 3
     c84:	85 91       	lpm	r24, Z+
     c86:	93 ff       	sbrs	r25, 3
     c88:	81 91       	ld	r24, Z+
     c8a:	6f 01       	movw	r12, r30
     c8c:	85 32       	cpi	r24, 0x25	; 37
     c8e:	29 f4       	brne	.+10     	; 0xc9a <vfprintf+0x56>
     c90:	b7 01       	movw	r22, r14
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     c98:	e7 cf       	rjmp	.-50     	; 0xc68 <vfprintf+0x24>
     c9a:	51 2c       	mov	r5, r1
     c9c:	31 2c       	mov	r3, r1
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	20 32       	cpi	r18, 0x20	; 32
     ca2:	a0 f4       	brcc	.+40     	; 0xccc <vfprintf+0x88>
     ca4:	8b 32       	cpi	r24, 0x2B	; 43
     ca6:	69 f0       	breq	.+26     	; 0xcc2 <vfprintf+0x7e>
     ca8:	30 f4       	brcc	.+12     	; 0xcb6 <vfprintf+0x72>
     caa:	80 32       	cpi	r24, 0x20	; 32
     cac:	59 f0       	breq	.+22     	; 0xcc4 <vfprintf+0x80>
     cae:	83 32       	cpi	r24, 0x23	; 35
     cb0:	69 f4       	brne	.+26     	; 0xccc <vfprintf+0x88>
     cb2:	20 61       	ori	r18, 0x10	; 16
     cb4:	2c c0       	rjmp	.+88     	; 0xd0e <vfprintf+0xca>
     cb6:	8d 32       	cpi	r24, 0x2D	; 45
     cb8:	39 f0       	breq	.+14     	; 0xcc8 <vfprintf+0x84>
     cba:	80 33       	cpi	r24, 0x30	; 48
     cbc:	39 f4       	brne	.+14     	; 0xccc <vfprintf+0x88>
     cbe:	21 60       	ori	r18, 0x01	; 1
     cc0:	26 c0       	rjmp	.+76     	; 0xd0e <vfprintf+0xca>
     cc2:	22 60       	ori	r18, 0x02	; 2
     cc4:	24 60       	ori	r18, 0x04	; 4
     cc6:	23 c0       	rjmp	.+70     	; 0xd0e <vfprintf+0xca>
     cc8:	28 60       	ori	r18, 0x08	; 8
     cca:	21 c0       	rjmp	.+66     	; 0xd0e <vfprintf+0xca>
     ccc:	27 fd       	sbrc	r18, 7
     cce:	27 c0       	rjmp	.+78     	; 0xd1e <vfprintf+0xda>
     cd0:	30 ed       	ldi	r19, 0xD0	; 208
     cd2:	38 0f       	add	r19, r24
     cd4:	3a 30       	cpi	r19, 0x0A	; 10
     cd6:	78 f4       	brcc	.+30     	; 0xcf6 <vfprintf+0xb2>
     cd8:	26 ff       	sbrs	r18, 6
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <vfprintf+0xa4>
     cdc:	fa e0       	ldi	r31, 0x0A	; 10
     cde:	5f 9e       	mul	r5, r31
     ce0:	30 0d       	add	r19, r0
     ce2:	11 24       	eor	r1, r1
     ce4:	53 2e       	mov	r5, r19
     ce6:	13 c0       	rjmp	.+38     	; 0xd0e <vfprintf+0xca>
     ce8:	8a e0       	ldi	r24, 0x0A	; 10
     cea:	38 9e       	mul	r3, r24
     cec:	30 0d       	add	r19, r0
     cee:	11 24       	eor	r1, r1
     cf0:	33 2e       	mov	r3, r19
     cf2:	20 62       	ori	r18, 0x20	; 32
     cf4:	0c c0       	rjmp	.+24     	; 0xd0e <vfprintf+0xca>
     cf6:	8e 32       	cpi	r24, 0x2E	; 46
     cf8:	21 f4       	brne	.+8      	; 0xd02 <vfprintf+0xbe>
     cfa:	26 fd       	sbrc	r18, 6
     cfc:	6b c1       	rjmp	.+726    	; 0xfd4 <vfprintf+0x390>
     cfe:	20 64       	ori	r18, 0x40	; 64
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <vfprintf+0xca>
     d02:	8c 36       	cpi	r24, 0x6C	; 108
     d04:	11 f4       	brne	.+4      	; 0xd0a <vfprintf+0xc6>
     d06:	20 68       	ori	r18, 0x80	; 128
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <vfprintf+0xca>
     d0a:	88 36       	cpi	r24, 0x68	; 104
     d0c:	41 f4       	brne	.+16     	; 0xd1e <vfprintf+0xda>
     d0e:	f6 01       	movw	r30, r12
     d10:	93 fd       	sbrc	r25, 3
     d12:	85 91       	lpm	r24, Z+
     d14:	93 ff       	sbrs	r25, 3
     d16:	81 91       	ld	r24, Z+
     d18:	6f 01       	movw	r12, r30
     d1a:	81 11       	cpse	r24, r1
     d1c:	c1 cf       	rjmp	.-126    	; 0xca0 <vfprintf+0x5c>
     d1e:	98 2f       	mov	r25, r24
     d20:	9f 7d       	andi	r25, 0xDF	; 223
     d22:	95 54       	subi	r25, 0x45	; 69
     d24:	93 30       	cpi	r25, 0x03	; 3
     d26:	28 f4       	brcc	.+10     	; 0xd32 <vfprintf+0xee>
     d28:	0c 5f       	subi	r16, 0xFC	; 252
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	ff e3       	ldi	r31, 0x3F	; 63
     d2e:	f9 83       	std	Y+1, r31	; 0x01
     d30:	0d c0       	rjmp	.+26     	; 0xd4c <vfprintf+0x108>
     d32:	83 36       	cpi	r24, 0x63	; 99
     d34:	31 f0       	breq	.+12     	; 0xd42 <vfprintf+0xfe>
     d36:	83 37       	cpi	r24, 0x73	; 115
     d38:	71 f0       	breq	.+28     	; 0xd56 <vfprintf+0x112>
     d3a:	83 35       	cpi	r24, 0x53	; 83
     d3c:	09 f0       	breq	.+2      	; 0xd40 <vfprintf+0xfc>
     d3e:	5b c0       	rjmp	.+182    	; 0xdf6 <vfprintf+0x1b2>
     d40:	22 c0       	rjmp	.+68     	; 0xd86 <vfprintf+0x142>
     d42:	f8 01       	movw	r30, r16
     d44:	80 81       	ld	r24, Z
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	0e 5f       	subi	r16, 0xFE	; 254
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	44 24       	eor	r4, r4
     d4e:	43 94       	inc	r4
     d50:	51 2c       	mov	r5, r1
     d52:	54 01       	movw	r10, r8
     d54:	15 c0       	rjmp	.+42     	; 0xd80 <vfprintf+0x13c>
     d56:	38 01       	movw	r6, r16
     d58:	f2 e0       	ldi	r31, 0x02	; 2
     d5a:	6f 0e       	add	r6, r31
     d5c:	71 1c       	adc	r7, r1
     d5e:	f8 01       	movw	r30, r16
     d60:	a0 80       	ld	r10, Z
     d62:	b1 80       	ldd	r11, Z+1	; 0x01
     d64:	26 ff       	sbrs	r18, 6
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <vfprintf+0x12a>
     d68:	65 2d       	mov	r22, r5
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <vfprintf+0x12e>
     d6e:	6f ef       	ldi	r22, 0xFF	; 255
     d70:	7f ef       	ldi	r23, 0xFF	; 255
     d72:	c5 01       	movw	r24, r10
     d74:	2c 87       	std	Y+12, r18	; 0x0c
     d76:	0e 94 ff 07 	call	0xffe	; 0xffe <strnlen>
     d7a:	2c 01       	movw	r4, r24
     d7c:	83 01       	movw	r16, r6
     d7e:	2c 85       	ldd	r18, Y+12	; 0x0c
     d80:	2f 77       	andi	r18, 0x7F	; 127
     d82:	22 2e       	mov	r2, r18
     d84:	17 c0       	rjmp	.+46     	; 0xdb4 <vfprintf+0x170>
     d86:	38 01       	movw	r6, r16
     d88:	f2 e0       	ldi	r31, 0x02	; 2
     d8a:	6f 0e       	add	r6, r31
     d8c:	71 1c       	adc	r7, r1
     d8e:	f8 01       	movw	r30, r16
     d90:	a0 80       	ld	r10, Z
     d92:	b1 80       	ldd	r11, Z+1	; 0x01
     d94:	26 ff       	sbrs	r18, 6
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <vfprintf+0x15a>
     d98:	65 2d       	mov	r22, r5
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <vfprintf+0x15e>
     d9e:	6f ef       	ldi	r22, 0xFF	; 255
     da0:	7f ef       	ldi	r23, 0xFF	; 255
     da2:	c5 01       	movw	r24, r10
     da4:	2c 87       	std	Y+12, r18	; 0x0c
     da6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <strnlen_P>
     daa:	2c 01       	movw	r4, r24
     dac:	2c 85       	ldd	r18, Y+12	; 0x0c
     dae:	20 68       	ori	r18, 0x80	; 128
     db0:	22 2e       	mov	r2, r18
     db2:	83 01       	movw	r16, r6
     db4:	23 fc       	sbrc	r2, 3
     db6:	1b c0       	rjmp	.+54     	; 0xdee <vfprintf+0x1aa>
     db8:	83 2d       	mov	r24, r3
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	48 16       	cp	r4, r24
     dbe:	59 06       	cpc	r5, r25
     dc0:	b0 f4       	brcc	.+44     	; 0xdee <vfprintf+0x1aa>
     dc2:	b7 01       	movw	r22, r14
     dc4:	80 e2       	ldi	r24, 0x20	; 32
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     dcc:	3a 94       	dec	r3
     dce:	f4 cf       	rjmp	.-24     	; 0xdb8 <vfprintf+0x174>
     dd0:	f5 01       	movw	r30, r10
     dd2:	27 fc       	sbrc	r2, 7
     dd4:	85 91       	lpm	r24, Z+
     dd6:	27 fe       	sbrs	r2, 7
     dd8:	81 91       	ld	r24, Z+
     dda:	5f 01       	movw	r10, r30
     ddc:	b7 01       	movw	r22, r14
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     de4:	31 10       	cpse	r3, r1
     de6:	3a 94       	dec	r3
     de8:	f1 e0       	ldi	r31, 0x01	; 1
     dea:	4f 1a       	sub	r4, r31
     dec:	51 08       	sbc	r5, r1
     dee:	41 14       	cp	r4, r1
     df0:	51 04       	cpc	r5, r1
     df2:	71 f7       	brne	.-36     	; 0xdd0 <vfprintf+0x18c>
     df4:	e5 c0       	rjmp	.+458    	; 0xfc0 <vfprintf+0x37c>
     df6:	84 36       	cpi	r24, 0x64	; 100
     df8:	11 f0       	breq	.+4      	; 0xdfe <vfprintf+0x1ba>
     dfa:	89 36       	cpi	r24, 0x69	; 105
     dfc:	39 f5       	brne	.+78     	; 0xe4c <vfprintf+0x208>
     dfe:	f8 01       	movw	r30, r16
     e00:	27 ff       	sbrs	r18, 7
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <vfprintf+0x1ce>
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	0c 5f       	subi	r16, 0xFC	; 252
     e0e:	1f 4f       	sbci	r17, 0xFF	; 255
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <vfprintf+0x1de>
     e12:	60 81       	ld	r22, Z
     e14:	71 81       	ldd	r23, Z+1	; 0x01
     e16:	88 27       	eor	r24, r24
     e18:	77 fd       	sbrc	r23, 7
     e1a:	80 95       	com	r24
     e1c:	98 2f       	mov	r25, r24
     e1e:	0e 5f       	subi	r16, 0xFE	; 254
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	2f 76       	andi	r18, 0x6F	; 111
     e24:	b2 2e       	mov	r11, r18
     e26:	97 ff       	sbrs	r25, 7
     e28:	09 c0       	rjmp	.+18     	; 0xe3c <vfprintf+0x1f8>
     e2a:	90 95       	com	r25
     e2c:	80 95       	com	r24
     e2e:	70 95       	com	r23
     e30:	61 95       	neg	r22
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	8f 4f       	sbci	r24, 0xFF	; 255
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	20 68       	ori	r18, 0x80	; 128
     e3a:	b2 2e       	mov	r11, r18
     e3c:	2a e0       	ldi	r18, 0x0A	; 10
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	a4 01       	movw	r20, r8
     e42:	0e 94 3c 08 	call	0x1078	; 0x1078 <__ultoa_invert>
     e46:	a8 2e       	mov	r10, r24
     e48:	a8 18       	sub	r10, r8
     e4a:	44 c0       	rjmp	.+136    	; 0xed4 <vfprintf+0x290>
     e4c:	85 37       	cpi	r24, 0x75	; 117
     e4e:	29 f4       	brne	.+10     	; 0xe5a <vfprintf+0x216>
     e50:	2f 7e       	andi	r18, 0xEF	; 239
     e52:	b2 2e       	mov	r11, r18
     e54:	2a e0       	ldi	r18, 0x0A	; 10
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	25 c0       	rjmp	.+74     	; 0xea4 <vfprintf+0x260>
     e5a:	f2 2f       	mov	r31, r18
     e5c:	f9 7f       	andi	r31, 0xF9	; 249
     e5e:	bf 2e       	mov	r11, r31
     e60:	8f 36       	cpi	r24, 0x6F	; 111
     e62:	c1 f0       	breq	.+48     	; 0xe94 <vfprintf+0x250>
     e64:	18 f4       	brcc	.+6      	; 0xe6c <vfprintf+0x228>
     e66:	88 35       	cpi	r24, 0x58	; 88
     e68:	79 f0       	breq	.+30     	; 0xe88 <vfprintf+0x244>
     e6a:	b4 c0       	rjmp	.+360    	; 0xfd4 <vfprintf+0x390>
     e6c:	80 37       	cpi	r24, 0x70	; 112
     e6e:	19 f0       	breq	.+6      	; 0xe76 <vfprintf+0x232>
     e70:	88 37       	cpi	r24, 0x78	; 120
     e72:	21 f0       	breq	.+8      	; 0xe7c <vfprintf+0x238>
     e74:	af c0       	rjmp	.+350    	; 0xfd4 <vfprintf+0x390>
     e76:	2f 2f       	mov	r18, r31
     e78:	20 61       	ori	r18, 0x10	; 16
     e7a:	b2 2e       	mov	r11, r18
     e7c:	b4 fe       	sbrs	r11, 4
     e7e:	0d c0       	rjmp	.+26     	; 0xe9a <vfprintf+0x256>
     e80:	8b 2d       	mov	r24, r11
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	b8 2e       	mov	r11, r24
     e86:	09 c0       	rjmp	.+18     	; 0xe9a <vfprintf+0x256>
     e88:	24 ff       	sbrs	r18, 4
     e8a:	0a c0       	rjmp	.+20     	; 0xea0 <vfprintf+0x25c>
     e8c:	9f 2f       	mov	r25, r31
     e8e:	96 60       	ori	r25, 0x06	; 6
     e90:	b9 2e       	mov	r11, r25
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <vfprintf+0x25c>
     e94:	28 e0       	ldi	r18, 0x08	; 8
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <vfprintf+0x260>
     e9a:	20 e1       	ldi	r18, 0x10	; 16
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <vfprintf+0x260>
     ea0:	20 e1       	ldi	r18, 0x10	; 16
     ea2:	32 e0       	ldi	r19, 0x02	; 2
     ea4:	f8 01       	movw	r30, r16
     ea6:	b7 fe       	sbrs	r11, 7
     ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <vfprintf+0x274>
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	0c 5f       	subi	r16, 0xFC	; 252
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	06 c0       	rjmp	.+12     	; 0xec4 <vfprintf+0x280>
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 5f       	subi	r16, 0xFE	; 254
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	a4 01       	movw	r20, r8
     ec6:	0e 94 3c 08 	call	0x1078	; 0x1078 <__ultoa_invert>
     eca:	a8 2e       	mov	r10, r24
     ecc:	a8 18       	sub	r10, r8
     ece:	fb 2d       	mov	r31, r11
     ed0:	ff 77       	andi	r31, 0x7F	; 127
     ed2:	bf 2e       	mov	r11, r31
     ed4:	b6 fe       	sbrs	r11, 6
     ed6:	0b c0       	rjmp	.+22     	; 0xeee <vfprintf+0x2aa>
     ed8:	2b 2d       	mov	r18, r11
     eda:	2e 7f       	andi	r18, 0xFE	; 254
     edc:	a5 14       	cp	r10, r5
     ede:	50 f4       	brcc	.+20     	; 0xef4 <vfprintf+0x2b0>
     ee0:	b4 fe       	sbrs	r11, 4
     ee2:	0a c0       	rjmp	.+20     	; 0xef8 <vfprintf+0x2b4>
     ee4:	b2 fc       	sbrc	r11, 2
     ee6:	08 c0       	rjmp	.+16     	; 0xef8 <vfprintf+0x2b4>
     ee8:	2b 2d       	mov	r18, r11
     eea:	2e 7e       	andi	r18, 0xEE	; 238
     eec:	05 c0       	rjmp	.+10     	; 0xef8 <vfprintf+0x2b4>
     eee:	7a 2c       	mov	r7, r10
     ef0:	2b 2d       	mov	r18, r11
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <vfprintf+0x2b6>
     ef4:	7a 2c       	mov	r7, r10
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <vfprintf+0x2b6>
     ef8:	75 2c       	mov	r7, r5
     efa:	24 ff       	sbrs	r18, 4
     efc:	0d c0       	rjmp	.+26     	; 0xf18 <vfprintf+0x2d4>
     efe:	fe 01       	movw	r30, r28
     f00:	ea 0d       	add	r30, r10
     f02:	f1 1d       	adc	r31, r1
     f04:	80 81       	ld	r24, Z
     f06:	80 33       	cpi	r24, 0x30	; 48
     f08:	11 f4       	brne	.+4      	; 0xf0e <vfprintf+0x2ca>
     f0a:	29 7e       	andi	r18, 0xE9	; 233
     f0c:	09 c0       	rjmp	.+18     	; 0xf20 <vfprintf+0x2dc>
     f0e:	22 ff       	sbrs	r18, 2
     f10:	06 c0       	rjmp	.+12     	; 0xf1e <vfprintf+0x2da>
     f12:	73 94       	inc	r7
     f14:	73 94       	inc	r7
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <vfprintf+0x2dc>
     f18:	82 2f       	mov	r24, r18
     f1a:	86 78       	andi	r24, 0x86	; 134
     f1c:	09 f0       	breq	.+2      	; 0xf20 <vfprintf+0x2dc>
     f1e:	73 94       	inc	r7
     f20:	23 fd       	sbrc	r18, 3
     f22:	13 c0       	rjmp	.+38     	; 0xf4a <vfprintf+0x306>
     f24:	20 ff       	sbrs	r18, 0
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <vfprintf+0x2f0>
     f28:	5a 2c       	mov	r5, r10
     f2a:	73 14       	cp	r7, r3
     f2c:	18 f4       	brcc	.+6      	; 0xf34 <vfprintf+0x2f0>
     f2e:	53 0c       	add	r5, r3
     f30:	57 18       	sub	r5, r7
     f32:	73 2c       	mov	r7, r3
     f34:	73 14       	cp	r7, r3
     f36:	68 f4       	brcc	.+26     	; 0xf52 <vfprintf+0x30e>
     f38:	b7 01       	movw	r22, r14
     f3a:	80 e2       	ldi	r24, 0x20	; 32
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	2c 87       	std	Y+12, r18	; 0x0c
     f40:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     f44:	73 94       	inc	r7
     f46:	2c 85       	ldd	r18, Y+12	; 0x0c
     f48:	f5 cf       	rjmp	.-22     	; 0xf34 <vfprintf+0x2f0>
     f4a:	73 14       	cp	r7, r3
     f4c:	10 f4       	brcc	.+4      	; 0xf52 <vfprintf+0x30e>
     f4e:	37 18       	sub	r3, r7
     f50:	01 c0       	rjmp	.+2      	; 0xf54 <vfprintf+0x310>
     f52:	31 2c       	mov	r3, r1
     f54:	24 ff       	sbrs	r18, 4
     f56:	12 c0       	rjmp	.+36     	; 0xf7c <vfprintf+0x338>
     f58:	b7 01       	movw	r22, r14
     f5a:	80 e3       	ldi	r24, 0x30	; 48
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	2c 87       	std	Y+12, r18	; 0x0c
     f60:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     f64:	2c 85       	ldd	r18, Y+12	; 0x0c
     f66:	22 ff       	sbrs	r18, 2
     f68:	17 c0       	rjmp	.+46     	; 0xf98 <vfprintf+0x354>
     f6a:	21 ff       	sbrs	r18, 1
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <vfprintf+0x330>
     f6e:	88 e5       	ldi	r24, 0x58	; 88
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0x334>
     f74:	88 e7       	ldi	r24, 0x78	; 120
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	b7 01       	movw	r22, r14
     f7a:	0c c0       	rjmp	.+24     	; 0xf94 <vfprintf+0x350>
     f7c:	82 2f       	mov	r24, r18
     f7e:	86 78       	andi	r24, 0x86	; 134
     f80:	59 f0       	breq	.+22     	; 0xf98 <vfprintf+0x354>
     f82:	21 fd       	sbrc	r18, 1
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <vfprintf+0x346>
     f86:	80 e2       	ldi	r24, 0x20	; 32
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <vfprintf+0x348>
     f8a:	8b e2       	ldi	r24, 0x2B	; 43
     f8c:	27 fd       	sbrc	r18, 7
     f8e:	8d e2       	ldi	r24, 0x2D	; 45
     f90:	b7 01       	movw	r22, r14
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     f98:	a5 14       	cp	r10, r5
     f9a:	38 f4       	brcc	.+14     	; 0xfaa <vfprintf+0x366>
     f9c:	b7 01       	movw	r22, r14
     f9e:	80 e3       	ldi	r24, 0x30	; 48
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     fa6:	5a 94       	dec	r5
     fa8:	f7 cf       	rjmp	.-18     	; 0xf98 <vfprintf+0x354>
     faa:	aa 94       	dec	r10
     fac:	f4 01       	movw	r30, r8
     fae:	ea 0d       	add	r30, r10
     fb0:	f1 1d       	adc	r31, r1
     fb2:	80 81       	ld	r24, Z
     fb4:	b7 01       	movw	r22, r14
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     fbc:	a1 10       	cpse	r10, r1
     fbe:	f5 cf       	rjmp	.-22     	; 0xfaa <vfprintf+0x366>
     fc0:	33 20       	and	r3, r3
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <vfprintf+0x382>
     fc4:	51 ce       	rjmp	.-862    	; 0xc68 <vfprintf+0x24>
     fc6:	b7 01       	movw	r22, r14
     fc8:	80 e2       	ldi	r24, 0x20	; 32
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 0a 08 	call	0x1014	; 0x1014 <fputc>
     fd0:	3a 94       	dec	r3
     fd2:	f6 cf       	rjmp	.-20     	; 0xfc0 <vfprintf+0x37c>
     fd4:	f7 01       	movw	r30, r14
     fd6:	86 81       	ldd	r24, Z+6	; 0x06
     fd8:	97 81       	ldd	r25, Z+7	; 0x07
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <vfprintf+0x39c>
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	9f ef       	ldi	r25, 0xFF	; 255
     fe0:	2c 96       	adiw	r28, 0x0c	; 12
     fe2:	e2 e1       	ldi	r30, 0x12	; 18
     fe4:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__epilogue_restores__>

00000fe8 <strnlen_P>:
     fe8:	fc 01       	movw	r30, r24
     fea:	05 90       	lpm	r0, Z+
     fec:	61 50       	subi	r22, 0x01	; 1
     fee:	70 40       	sbci	r23, 0x00	; 0
     ff0:	01 10       	cpse	r0, r1
     ff2:	d8 f7       	brcc	.-10     	; 0xfea <strnlen_P+0x2>
     ff4:	80 95       	com	r24
     ff6:	90 95       	com	r25
     ff8:	8e 0f       	add	r24, r30
     ffa:	9f 1f       	adc	r25, r31
     ffc:	08 95       	ret

00000ffe <strnlen>:
     ffe:	fc 01       	movw	r30, r24
    1000:	61 50       	subi	r22, 0x01	; 1
    1002:	70 40       	sbci	r23, 0x00	; 0
    1004:	01 90       	ld	r0, Z+
    1006:	01 10       	cpse	r0, r1
    1008:	d8 f7       	brcc	.-10     	; 0x1000 <strnlen+0x2>
    100a:	80 95       	com	r24
    100c:	90 95       	com	r25
    100e:	8e 0f       	add	r24, r30
    1010:	9f 1f       	adc	r25, r31
    1012:	08 95       	ret

00001014 <fputc>:
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	18 2f       	mov	r17, r24
    101e:	09 2f       	mov	r16, r25
    1020:	eb 01       	movw	r28, r22
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	81 fd       	sbrc	r24, 1
    1026:	03 c0       	rjmp	.+6      	; 0x102e <fputc+0x1a>
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    102c:	20 c0       	rjmp	.+64     	; 0x106e <fputc+0x5a>
    102e:	82 ff       	sbrs	r24, 2
    1030:	10 c0       	rjmp	.+32     	; 0x1052 <fputc+0x3e>
    1032:	4e 81       	ldd	r20, Y+6	; 0x06
    1034:	5f 81       	ldd	r21, Y+7	; 0x07
    1036:	2c 81       	ldd	r18, Y+4	; 0x04
    1038:	3d 81       	ldd	r19, Y+5	; 0x05
    103a:	42 17       	cp	r20, r18
    103c:	53 07       	cpc	r21, r19
    103e:	7c f4       	brge	.+30     	; 0x105e <fputc+0x4a>
    1040:	e8 81       	ld	r30, Y
    1042:	f9 81       	ldd	r31, Y+1	; 0x01
    1044:	9f 01       	movw	r18, r30
    1046:	2f 5f       	subi	r18, 0xFF	; 255
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	39 83       	std	Y+1, r19	; 0x01
    104c:	28 83       	st	Y, r18
    104e:	10 83       	st	Z, r17
    1050:	06 c0       	rjmp	.+12     	; 0x105e <fputc+0x4a>
    1052:	e8 85       	ldd	r30, Y+8	; 0x08
    1054:	f9 85       	ldd	r31, Y+9	; 0x09
    1056:	81 2f       	mov	r24, r17
    1058:	09 95       	icall
    105a:	89 2b       	or	r24, r25
    105c:	29 f7       	brne	.-54     	; 0x1028 <fputc+0x14>
    105e:	2e 81       	ldd	r18, Y+6	; 0x06
    1060:	3f 81       	ldd	r19, Y+7	; 0x07
    1062:	2f 5f       	subi	r18, 0xFF	; 255
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	3f 83       	std	Y+7, r19	; 0x07
    1068:	2e 83       	std	Y+6, r18	; 0x06
    106a:	81 2f       	mov	r24, r17
    106c:	90 2f       	mov	r25, r16
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	08 95       	ret

00001078 <__ultoa_invert>:
    1078:	fa 01       	movw	r30, r20
    107a:	aa 27       	eor	r26, r26
    107c:	28 30       	cpi	r18, 0x08	; 8
    107e:	51 f1       	breq	.+84     	; 0x10d4 <__ultoa_invert+0x5c>
    1080:	20 31       	cpi	r18, 0x10	; 16
    1082:	81 f1       	breq	.+96     	; 0x10e4 <__ultoa_invert+0x6c>
    1084:	e8 94       	clt
    1086:	6f 93       	push	r22
    1088:	6e 7f       	andi	r22, 0xFE	; 254
    108a:	6e 5f       	subi	r22, 0xFE	; 254
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	8f 4f       	sbci	r24, 0xFF	; 255
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	af 4f       	sbci	r26, 0xFF	; 255
    1094:	b1 e0       	ldi	r27, 0x01	; 1
    1096:	3e d0       	rcall	.+124    	; 0x1114 <__ultoa_invert+0x9c>
    1098:	b4 e0       	ldi	r27, 0x04	; 4
    109a:	3c d0       	rcall	.+120    	; 0x1114 <__ultoa_invert+0x9c>
    109c:	67 0f       	add	r22, r23
    109e:	78 1f       	adc	r23, r24
    10a0:	89 1f       	adc	r24, r25
    10a2:	9a 1f       	adc	r25, r26
    10a4:	a1 1d       	adc	r26, r1
    10a6:	68 0f       	add	r22, r24
    10a8:	79 1f       	adc	r23, r25
    10aa:	8a 1f       	adc	r24, r26
    10ac:	91 1d       	adc	r25, r1
    10ae:	a1 1d       	adc	r26, r1
    10b0:	6a 0f       	add	r22, r26
    10b2:	71 1d       	adc	r23, r1
    10b4:	81 1d       	adc	r24, r1
    10b6:	91 1d       	adc	r25, r1
    10b8:	a1 1d       	adc	r26, r1
    10ba:	20 d0       	rcall	.+64     	; 0x10fc <__ultoa_invert+0x84>
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <__ultoa_invert+0x48>
    10be:	68 94       	set
    10c0:	3f 91       	pop	r19
    10c2:	2a e0       	ldi	r18, 0x0A	; 10
    10c4:	26 9f       	mul	r18, r22
    10c6:	11 24       	eor	r1, r1
    10c8:	30 19       	sub	r19, r0
    10ca:	30 5d       	subi	r19, 0xD0	; 208
    10cc:	31 93       	st	Z+, r19
    10ce:	de f6       	brtc	.-74     	; 0x1086 <__ultoa_invert+0xe>
    10d0:	cf 01       	movw	r24, r30
    10d2:	08 95       	ret
    10d4:	46 2f       	mov	r20, r22
    10d6:	47 70       	andi	r20, 0x07	; 7
    10d8:	40 5d       	subi	r20, 0xD0	; 208
    10da:	41 93       	st	Z+, r20
    10dc:	b3 e0       	ldi	r27, 0x03	; 3
    10de:	0f d0       	rcall	.+30     	; 0x10fe <__ultoa_invert+0x86>
    10e0:	c9 f7       	brne	.-14     	; 0x10d4 <__ultoa_invert+0x5c>
    10e2:	f6 cf       	rjmp	.-20     	; 0x10d0 <__ultoa_invert+0x58>
    10e4:	46 2f       	mov	r20, r22
    10e6:	4f 70       	andi	r20, 0x0F	; 15
    10e8:	40 5d       	subi	r20, 0xD0	; 208
    10ea:	4a 33       	cpi	r20, 0x3A	; 58
    10ec:	18 f0       	brcs	.+6      	; 0x10f4 <__ultoa_invert+0x7c>
    10ee:	49 5d       	subi	r20, 0xD9	; 217
    10f0:	31 fd       	sbrc	r19, 1
    10f2:	40 52       	subi	r20, 0x20	; 32
    10f4:	41 93       	st	Z+, r20
    10f6:	02 d0       	rcall	.+4      	; 0x10fc <__ultoa_invert+0x84>
    10f8:	a9 f7       	brne	.-22     	; 0x10e4 <__ultoa_invert+0x6c>
    10fa:	ea cf       	rjmp	.-44     	; 0x10d0 <__ultoa_invert+0x58>
    10fc:	b4 e0       	ldi	r27, 0x04	; 4
    10fe:	a6 95       	lsr	r26
    1100:	97 95       	ror	r25
    1102:	87 95       	ror	r24
    1104:	77 95       	ror	r23
    1106:	67 95       	ror	r22
    1108:	ba 95       	dec	r27
    110a:	c9 f7       	brne	.-14     	; 0x10fe <__ultoa_invert+0x86>
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	61 05       	cpc	r22, r1
    1110:	71 05       	cpc	r23, r1
    1112:	08 95       	ret
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	0a 2e       	mov	r0, r26
    111a:	06 94       	lsr	r0
    111c:	57 95       	ror	r21
    111e:	47 95       	ror	r20
    1120:	37 95       	ror	r19
    1122:	27 95       	ror	r18
    1124:	ba 95       	dec	r27
    1126:	c9 f7       	brne	.-14     	; 0x111a <__ultoa_invert+0xa2>
    1128:	62 0f       	add	r22, r18
    112a:	73 1f       	adc	r23, r19
    112c:	84 1f       	adc	r24, r20
    112e:	95 1f       	adc	r25, r21
    1130:	a0 1d       	adc	r26, r0
    1132:	08 95       	ret

00001134 <__prologue_saves__>:
    1134:	2f 92       	push	r2
    1136:	3f 92       	push	r3
    1138:	4f 92       	push	r4
    113a:	5f 92       	push	r5
    113c:	6f 92       	push	r6
    113e:	7f 92       	push	r7
    1140:	8f 92       	push	r8
    1142:	9f 92       	push	r9
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	ca 1b       	sub	r28, r26
    115e:	db 0b       	sbc	r29, r27
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	09 94       	ijmp

0000116c <__epilogue_restores__>:
    116c:	2a 88       	ldd	r2, Y+18	; 0x12
    116e:	39 88       	ldd	r3, Y+17	; 0x11
    1170:	48 88       	ldd	r4, Y+16	; 0x10
    1172:	5f 84       	ldd	r5, Y+15	; 0x0f
    1174:	6e 84       	ldd	r6, Y+14	; 0x0e
    1176:	7d 84       	ldd	r7, Y+13	; 0x0d
    1178:	8c 84       	ldd	r8, Y+12	; 0x0c
    117a:	9b 84       	ldd	r9, Y+11	; 0x0b
    117c:	aa 84       	ldd	r10, Y+10	; 0x0a
    117e:	b9 84       	ldd	r11, Y+9	; 0x09
    1180:	c8 84       	ldd	r12, Y+8	; 0x08
    1182:	df 80       	ldd	r13, Y+7	; 0x07
    1184:	ee 80       	ldd	r14, Y+6	; 0x06
    1186:	fd 80       	ldd	r15, Y+5	; 0x05
    1188:	0c 81       	ldd	r16, Y+4	; 0x04
    118a:	1b 81       	ldd	r17, Y+3	; 0x03
    118c:	aa 81       	ldd	r26, Y+2	; 0x02
    118e:	b9 81       	ldd	r27, Y+1	; 0x01
    1190:	ce 0f       	add	r28, r30
    1192:	d1 1d       	adc	r29, r1
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	ed 01       	movw	r28, r26
    11a0:	08 95       	ret

000011a2 <_exit>:
    11a2:	f8 94       	cli

000011a4 <__stop_program>:
    11a4:	ff cf       	rjmp	.-2      	; 0x11a4 <__stop_program>
