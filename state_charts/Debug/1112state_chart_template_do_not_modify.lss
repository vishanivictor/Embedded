
1112state_chart_template_do_not_modify.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000008be  00000952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  00800100  00800100  00000952  2**0
                  ALLOC
  3 .stab         00001adc  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020e6  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000027  00000000  00000000  00004516  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00004540  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000007cb  00000000  00000000  000045a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005de  00000000  00000000  00004d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000015f  00000000  00000000  00005349  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020b  00000000  00000000  000054a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	cb 01       	movw	r24, r22
  6a:	d1 01       	movw	r26, r2
  6c:	d7 01       	movw	r26, r14
  6e:	dd 01       	movw	r26, r26
  70:	e3 01       	movw	r28, r6
  72:	e9 01       	movw	r28, r18
  74:	c5 01       	movw	r24, r10
  76:	bf 01       	movw	r22, r30

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_clear_bss>:
  84:	12 e0       	ldi	r17, 0x02	; 2
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	ae 33       	cpi	r26, 0x3E	; 62
  90:	b1 07       	cpc	r27, r17
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 35 04 	call	0x86a	; 0x86a <main>
  98:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <state_chart_effect_main_region_Manual_Mode_tr0>:
{
	return handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Bright_Waiting_tev0_raised;
}

static void state_chart_effect_main_region_Manual_Mode_tr0(State_chart* handle)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	ec 01       	movw	r28, r24
/* Default exit sequence for region r1 */
static void state_chart_exseq_main_region_Manual_Mode_r1(State_chart* handle)
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of state_chart.main_region.Manual_Mode.r1) at position 0... */
	switch(handle->stateConfVector[ 0 ])
  a6:	88 81       	ld	r24, Y
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	11 f0       	breq	.+4      	; 0xb0 <state_chart_effect_main_region_Manual_Mode_tr0+0x10>
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	19 f4       	brne	.+6      	; 0xb6 <state_chart_effect_main_region_Manual_Mode_tr0+0x16>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_Manual_Mode_r1_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
  b0:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
  b2:	1a 82       	std	Y+2, r1	; 0x02
  b4:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Automatic_Mode_r1_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chartIface_setLight(handle, bool_false);
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	ce 01       	movw	r24, r28
  ba:	0e 94 51 04 	call	0x8a2	; 0x8a2 <state_chartIface_setLight>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Automatic_Mode_r1_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Automatic_Mode_r1_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_Mode_r1_Off;
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	88 83       	st	Y, r24
	handle->stateConfVectorPosition = 0;
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	19 82       	std	Y+1, r1	; 0x01

static void state_chart_effect_main_region_Manual_Mode_tr0(State_chart* handle)
{
	state_chart_exseq_main_region_Manual_Mode(handle);
	state_chart_enseq_main_region_Automatic_Mode_default(handle);
}
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <state_chart_effect_main_region_Automatic_Mode_tr0>:
	state_chart_exseq_main_region_Manual_Mode_r1_On(handle);
	state_chart_enseq_main_region_Manual_Mode_r1_Off_default(handle);
}

static void state_chart_effect_main_region_Automatic_Mode_tr0(State_chart* handle)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
/* Default exit sequence for region r1 */
static void state_chart_exseq_main_region_Automatic_Mode_r1(State_chart* handle)
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of state_chart.main_region.Automatic_Mode.r1) at position 0... */
	switch(handle->stateConfVector[ 0 ])
  d2:	88 81       	ld	r24, Y
  d4:	86 30       	cpi	r24, 0x06	; 6
  d6:	29 f1       	breq	.+74     	; 0x122 <state_chart_effect_main_region_Automatic_Mode_tr0+0x56>
  d8:	10 f1       	brcs	.+68     	; 0x11e <state_chart_effect_main_region_Automatic_Mode_tr0+0x52>
  da:	87 30       	cpi	r24, 0x07	; 7
  dc:	b1 f0       	breq	.+44     	; 0x10a <state_chart_effect_main_region_Automatic_Mode_tr0+0x3e>
  de:	88 30       	cpi	r24, 0x08	; 8
  e0:	49 f4       	brne	.+18     	; 0xf4 <state_chart_effect_main_region_Automatic_Mode_tr0+0x28>

/* Default exit sequence for state Bright Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Bright Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
  e2:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
  e4:	1a 82       	std	Y+2, r1	; 0x02
  e6:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Bright_Waiting_tev0_raised) );		
  e8:	be 01       	movw	r22, r28
  ea:	67 5f       	subi	r22, 0xF7	; 247
  ec:	7f 4f       	sbci	r23, 0xFF	; 255
  ee:	ce 01       	movw	r24, r28
  f0:	0e 94 cf 03 	call	0x79e	; 0x79e <state_chart_unsetTimer>

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Manual_Mode_r1_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chartIface_setLight(handle, bool_false);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	ce 01       	movw	r24, r28
  f8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <state_chartIface_setLight>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Manual_Mode_r1_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Manual_Mode_r1_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_Mode_r1_Off;
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	88 83       	st	Y, r24
	handle->stateConfVectorPosition = 0;
 100:	1a 82       	std	Y+2, r1	; 0x02
 102:	19 82       	std	Y+1, r1	; 0x01

static void state_chart_effect_main_region_Automatic_Mode_tr0(State_chart* handle)
{
	state_chart_exseq_main_region_Automatic_Mode(handle);
	state_chart_enseq_main_region_Manual_Mode_default(handle);
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

/* Default exit sequence for state Dark Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_r1_Dark_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Dark Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
 10a:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 10c:	1a 82       	std	Y+2, r1	; 0x02
 10e:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Dark Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_r1_Dark_Waiting(State_chart* handle)
{
	/* Exit action for state 'Dark Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Dark_Waiting_tev0_raised) );		
 110:	be 01       	movw	r22, r28
 112:	68 5f       	subi	r22, 0xF8	; 248
 114:	7f 4f       	sbci	r23, 0xFF	; 255
 116:	ce 01       	movw	r24, r28
 118:	0e 94 cf 03 	call	0x79e	; 0x79e <state_chart_unsetTimer>
 11c:	eb cf       	rjmp	.-42     	; 0xf4 <state_chart_effect_main_region_Automatic_Mode_tr0+0x28>
/* Default exit sequence for region r1 */
static void state_chart_exseq_main_region_Automatic_Mode_r1(State_chart* handle)
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of state_chart.main_region.Automatic_Mode.r1) at position 0... */
	switch(handle->stateConfVector[ 0 ])
 11e:	85 30       	cpi	r24, 0x05	; 5
 120:	49 f7       	brne	.-46     	; 0xf4 <state_chart_effect_main_region_Automatic_Mode_tr0+0x28>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_Automatic_Mode_r1_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
 122:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 124:	1a 82       	std	Y+2, r1	; 0x02
 126:	19 82       	std	Y+1, r1	; 0x01
 128:	e5 cf       	rjmp	.-54     	; 0xf4 <state_chart_effect_main_region_Automatic_Mode_tr0+0x28>

0000012a <state_chart_init>:
static void state_chart_clearInEvents(State_chart* handle);
static void state_chart_clearOutEvents(State_chart* handle);


void state_chart_init(State_chart* handle)
{
 12a:	fc 01       	movw	r30, r24
		sc_integer i;
	
		for (i = 0; i < STATE_CHART_MAX_ORTHOGONAL_STATES; ++i)
		{
			handle->stateConfVector[i] = State_chart_last_state;
 12c:	10 82       	st	Z, r1
		}
		
		
		handle->stateConfVectorPosition = 0;
 12e:	12 82       	std	Z+2, r1	; 0x02
 130:	11 82       	std	Z+1, r1	; 0x01
   return bool_false;
}

static void state_chart_clearInEvents(State_chart* handle)
{
	handle->iface.key_On_raised = bool_false;
 132:	13 82       	std	Z+3, r1	; 0x03
	handle->iface.key_Off_raised = bool_false;
 134:	14 82       	std	Z+4, r1	; 0x04
	handle->iface.key_Mode_raised = bool_false;
 136:	15 82       	std	Z+5, r1	; 0x05
	handle->iface.when_Dark_raised = bool_false;
 138:	16 82       	std	Z+6, r1	; 0x06
	handle->iface.when_Bright_raised = bool_false;
 13a:	17 82       	std	Z+7, r1	; 0x07
	handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Dark_Waiting_tev0_raised = bool_false;
 13c:	10 86       	std	Z+8, r1	; 0x08
	handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Bright_Waiting_tev0_raised = bool_false;
 13e:	11 86       	std	Z+9, r1	; 0x09
 140:	08 95       	ret

00000142 <state_chart_enter>:
		state_chart_clearOutEvents(handle);
	
}

void state_chart_enter(State_chart* handle)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Manual_Mode_r1_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chartIface_setLight(handle, bool_false);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <state_chartIface_setLight>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Manual_Mode_r1_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Manual_Mode_r1_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_Mode_r1_Off;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	88 83       	st	Y, r24
	handle->stateConfVectorPosition = 0;
 152:	1a 82       	std	Y+2, r1	; 0x02
 154:	19 82       	std	Y+1, r1	; 0x01

void state_chart_enter(State_chart* handle)
{
	/* Default enter sequence for statechart state_chart */
	state_chart_enseq_main_region_default(handle);
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <state_chart_exit>:

void state_chart_exit(State_chart* handle)
{
 15c:	fc 01       	movw	r30, r24
/* Default exit sequence for region main region */
static void state_chart_exseq_main_region(State_chart* handle)
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of state_chart.main_region) at position 0... */
	switch(handle->stateConfVector[ 0 ])
 15e:	80 81       	ld	r24, Z
 160:	85 30       	cpi	r24, 0x05	; 5
 162:	99 f0       	breq	.+38     	; 0x18a <state_chart_exit+0x2e>
 164:	70 f0       	brcs	.+28     	; 0x182 <state_chart_exit+0x26>
 166:	87 30       	cpi	r24, 0x07	; 7
 168:	a1 f0       	breq	.+40     	; 0x192 <state_chart_exit+0x36>
 16a:	78 f0       	brcs	.+30     	; 0x18a <state_chart_exit+0x2e>
 16c:	88 30       	cpi	r24, 0x08	; 8
 16e:	d9 f4       	brne	.+54     	; 0x1a6 <state_chart_exit+0x4a>

/* Default exit sequence for state Bright Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Bright Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
 170:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
 172:	12 82       	std	Z+2, r1	; 0x02
 174:	11 82       	std	Z+1, r1	; 0x01

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Bright_Waiting_tev0_raised) );		
 176:	bf 01       	movw	r22, r30
 178:	67 5f       	subi	r22, 0xF7	; 247
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
 17c:	cf 01       	movw	r24, r30
 17e:	0c 94 cf 03 	jmp	0x79e	; 0x79e <state_chart_unsetTimer>
/* Default exit sequence for region main region */
static void state_chart_exseq_main_region(State_chart* handle)
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of state_chart.main_region) at position 0... */
	switch(handle->stateConfVector[ 0 ])
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	11 f0       	breq	.+4      	; 0x18a <state_chart_exit+0x2e>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	69 f4       	brne	.+26     	; 0x1a4 <state_chart_exit+0x48>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_Automatic_Mode_r1_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
 18a:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
 18c:	12 82       	std	Z+2, r1	; 0x02
 18e:	11 82       	std	Z+1, r1	; 0x01
 190:	08 95       	ret

/* Default exit sequence for state Dark Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_r1_Dark_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Dark Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
 192:	10 82       	st	Z, r1
	handle->stateConfVectorPosition = 0;
 194:	12 82       	std	Z+2, r1	; 0x02
 196:	11 82       	std	Z+1, r1	; 0x01

/* Exit action for state 'Dark Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_r1_Dark_Waiting(State_chart* handle)
{
	/* Exit action for state 'Dark Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Dark_Waiting_tev0_raised) );		
 198:	bf 01       	movw	r22, r30
 19a:	68 5f       	subi	r22, 0xF8	; 248
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	cf 01       	movw	r24, r30
 1a0:	0c 94 cf 03 	jmp	0x79e	; 0x79e <state_chart_unsetTimer>
 1a4:	08 95       	ret
 1a6:	08 95       	ret

000001a8 <state_chart_isActive>:
	/* Default exit sequence for statechart state_chart */
	state_chart_exseq_main_region(handle);
}

sc_boolean state_chart_isActive(const State_chart* handle)
{
 1a8:	fc 01       	movw	r30, r24
	sc_boolean result = bool_false;
	int i;
	
	for(i = 0; i < STATE_CHART_MAX_ORTHOGONAL_STATES; i++)
	{
		result = result || handle->stateConfVector[i] != State_chart_last_state;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 81       	ld	r25, Z
 1ae:	91 11       	cpse	r25, r1
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <state_chart_isActive+0xc>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return result;
}
 1b4:	08 95       	ret

000001b6 <state_chart_isFinal>:
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean state_chart_isFinal(const State_chart* handle)
{
   return bool_false;
}
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret

000001ba <state_chart_runCycle>:
static void state_chart_clearOutEvents(State_chart* handle)
{
}

void state_chart_runCycle(State_chart* handle)
{
 1ba:	0f 93       	push	r16
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	ec 01       	movw	r28, r24
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
 1c2:	1a 82       	std	Y+2, r1	; 0x02
 1c4:	19 82       	std	Y+1, r1	; 0x01
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
		{
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
 1c6:	88 81       	ld	r24, Y
 1c8:	85 30       	cpi	r24, 0x05	; 5
 1ca:	09 f4       	brne	.+2      	; 0x1ce <state_chart_runCycle+0x14>
 1cc:	5e c0       	rjmp	.+188    	; 0x28a <state_chart_runCycle+0xd0>
 1ce:	08 f1       	brcs	.+66     	; 0x212 <state_chart_runCycle+0x58>
 1d0:	87 30       	cpi	r24, 0x07	; 7
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <state_chart_runCycle+0x1c>
 1d4:	76 c0       	rjmp	.+236    	; 0x2c2 <state_chart_runCycle+0x108>
 1d6:	88 f1       	brcs	.+98     	; 0x23a <state_chart_runCycle+0x80>
 1d8:	88 30       	cpi	r24, 0x08	; 8
 1da:	49 f4       	brne	.+18     	; 0x1ee <state_chart_runCycle+0x34>

/* The reactions of state Bright Waiting. */
static void state_chart_react_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* The reactions of state Bright Waiting. */
	if (state_chart_check_main_region_Automatic_Mode_tr0_tr0(handle) == bool_true)
 1dc:	8d 81       	ldd	r24, Y+5	; 0x05
 1de:	81 11       	cpse	r24, r1
 1e0:	8a c0       	rjmp	.+276    	; 0x2f6 <state_chart_runCycle+0x13c>
	{ 
		state_chart_effect_main_region_Automatic_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_Mode_r1_Bright_Waiting_tr0_tr0(handle) == bool_true)
 1e2:	8e 81       	ldd	r24, Y+6	; 0x06
 1e4:	81 11       	cpse	r24, r1
 1e6:	a9 c0       	rjmp	.+338    	; 0x33a <state_chart_runCycle+0x180>
		{ 
			state_chart_effect_main_region_Automatic_Mode_r1_Bright_Waiting_tr0(handle);
		}  else
		{
			if (state_chart_check_main_region_Automatic_Mode_r1_Bright_Waiting_tr1_tr1(handle) == bool_true)
 1e8:	89 85       	ldd	r24, Y+9	; 0x09
 1ea:	81 11       	cpse	r24, r1
 1ec:	8f c0       	rjmp	.+286    	; 0x30c <state_chart_runCycle+0x152>
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	9a 81       	ldd	r25, Y+2	; 0x02
 1f2:	01 96       	adiw	r24, 0x01	; 1
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
 1f4:	9a 83       	std	Y+2, r25	; 0x02
 1f6:	89 83       	std	Y+1, r24	; 0x01

void state_chart_runCycle(State_chart* handle)
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
 1f8:	89 2b       	or	r24, r25
 1fa:	29 f3       	breq	.-54     	; 0x1c6 <state_chart_runCycle+0xc>
   return bool_false;
}

static void state_chart_clearInEvents(State_chart* handle)
{
	handle->iface.key_On_raised = bool_false;
 1fc:	1b 82       	std	Y+3, r1	; 0x03
	handle->iface.key_Off_raised = bool_false;
 1fe:	1c 82       	std	Y+4, r1	; 0x04
	handle->iface.key_Mode_raised = bool_false;
 200:	1d 82       	std	Y+5, r1	; 0x05
	handle->iface.when_Dark_raised = bool_false;
 202:	1e 82       	std	Y+6, r1	; 0x06
	handle->iface.when_Bright_raised = bool_false;
 204:	1f 82       	std	Y+7, r1	; 0x07
	handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Dark_Waiting_tev0_raised = bool_false;
 206:	18 86       	std	Y+8, r1	; 0x08
	handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Bright_Waiting_tev0_raised = bool_false;
 208:	19 86       	std	Y+9, r1	; 0x09
			break;
		}
	}
	
	state_chart_clearInEvents(handle);
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	0f 91       	pop	r16
 210:	08 95       	ret
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
		{
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	49 f1       	breq	.+82     	; 0x268 <state_chart_runCycle+0xae>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	51 f7       	brne	.-44     	; 0x1ee <state_chart_runCycle+0x34>

/* The reactions of state On. */
static void state_chart_react_main_region_Manual_Mode_r1_On(State_chart* handle)
{
	/* The reactions of state On. */
	if (state_chart_check_main_region_Manual_Mode_tr0_tr0(handle) == bool_true)
 21a:	8d 81       	ldd	r24, Y+5	; 0x05
 21c:	81 11       	cpse	r24, r1
 21e:	72 c0       	rjmp	.+228    	; 0x304 <state_chart_runCycle+0x14a>
	{ 
		state_chart_effect_main_region_Manual_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Manual_Mode_r1_On_tr0_tr0(handle) == bool_true)
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	88 23       	and	r24, r24
 224:	21 f3       	breq	.-56     	; 0x1ee <state_chart_runCycle+0x34>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_Manual_Mode_r1_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
 226:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 228:	1a 82       	std	Y+2, r1	; 0x02
 22a:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Manual_Mode_r1_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chartIface_setLight(handle, bool_false);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	ce 01       	movw	r24, r28
 230:	0e 94 51 04 	call	0x8a2	; 0x8a2 <state_chartIface_setLight>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Manual_Mode_r1_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Manual_Mode_r1_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_Mode_r1_Off;
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	88 83       	st	Y, r24
 238:	3f c0       	rjmp	.+126    	; 0x2b8 <state_chart_runCycle+0xfe>

/* The reactions of state On. */
static void state_chart_react_main_region_Automatic_Mode_r1_On(State_chart* handle)
{
	/* The reactions of state On. */
	if (state_chart_check_main_region_Automatic_Mode_tr0_tr0(handle) == bool_true)
 23a:	8d 81       	ldd	r24, Y+5	; 0x05
 23c:	81 11       	cpse	r24, r1
 23e:	5b c0       	rjmp	.+182    	; 0x2f6 <state_chart_runCycle+0x13c>
	{ 
		state_chart_effect_main_region_Automatic_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_Mode_r1_On_tr0_tr0(handle) == bool_true)
 240:	8f 81       	ldd	r24, Y+7	; 0x07
 242:	88 23       	and	r24, r24
 244:	a1 f2       	breq	.-88     	; 0x1ee <state_chart_runCycle+0x34>

/* Default exit sequence for state On */
static void state_chart_exseq_main_region_Automatic_Mode_r1_On(State_chart* handle)
{
	/* Default exit sequence for state On */
	handle->stateConfVector[0] = State_chart_last_state;
 246:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 248:	1a 82       	std	Y+2, r1	; 0x02
 24a:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'Bright Waiting'. */
static void state_chart_enact_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Entry action for state 'Bright Waiting'. */
	state_chart_setTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Bright_Waiting_tev0_raised) , 5 * 1000, bool_false);
 24c:	00 e0       	ldi	r16, 0x00	; 0
 24e:	28 e8       	ldi	r18, 0x88	; 136
 250:	33 e1       	ldi	r19, 0x13	; 19
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	be 01       	movw	r22, r28
 258:	67 5f       	subi	r22, 0xF7	; 247
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
 25c:	ce 01       	movw	r24, r28
 25e:	0e 94 75 03 	call	0x6ea	; 0x6ea <state_chart_setTimer>
/* 'default' enter sequence for state Bright Waiting */
static void state_chart_enseq_main_region_Automatic_Mode_r1_Bright_Waiting_default(State_chart* handle)
{
	/* 'default' enter sequence for state Bright Waiting */
	state_chart_enact_main_region_Automatic_Mode_r1_Bright_Waiting(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_Mode_r1_Bright_Waiting;
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	88 83       	st	Y, r24
 266:	28 c0       	rjmp	.+80     	; 0x2b8 <state_chart_runCycle+0xfe>

/* The reactions of state Off. */
static void state_chart_react_main_region_Manual_Mode_r1_Off(State_chart* handle)
{
	/* The reactions of state Off. */
	if (state_chart_check_main_region_Manual_Mode_tr0_tr0(handle) == bool_true)
 268:	8d 81       	ldd	r24, Y+5	; 0x05
 26a:	81 11       	cpse	r24, r1
 26c:	4b c0       	rjmp	.+150    	; 0x304 <state_chart_runCycle+0x14a>
	{ 
		state_chart_effect_main_region_Manual_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Manual_Mode_r1_Off_tr0_tr0(handle) == bool_true)
 26e:	8c 81       	ldd	r24, Y+4	; 0x04
 270:	88 23       	and	r24, r24
 272:	09 f4       	brne	.+2      	; 0x276 <state_chart_runCycle+0xbc>
 274:	bc cf       	rjmp	.-136    	; 0x1ee <state_chart_runCycle+0x34>

/* Default exit sequence for state Off */
static void state_chart_exseq_main_region_Manual_Mode_r1_Off(State_chart* handle)
{
	/* Default exit sequence for state Off */
	handle->stateConfVector[0] = State_chart_last_state;
 276:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 278:	1a 82       	std	Y+2, r1	; 0x02
 27a:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'On'. */
static void state_chart_enact_main_region_Manual_Mode_r1_On(State_chart* handle)
{
	/* Entry action for state 'On'. */
	state_chartIface_setLight(handle, bool_true);
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	ce 01       	movw	r24, r28
 280:	0e 94 51 04 	call	0x8a2	; 0x8a2 <state_chartIface_setLight>
/* 'default' enter sequence for state On */
static void state_chart_enseq_main_region_Manual_Mode_r1_On_default(State_chart* handle)
{
	/* 'default' enter sequence for state On */
	state_chart_enact_main_region_Manual_Mode_r1_On(handle);
	handle->stateConfVector[0] = State_chart_main_region_Manual_Mode_r1_On;
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	88 83       	st	Y, r24
 288:	17 c0       	rjmp	.+46     	; 0x2b8 <state_chart_runCycle+0xfe>

/* The reactions of state Off. */
static void state_chart_react_main_region_Automatic_Mode_r1_Off(State_chart* handle)
{
	/* The reactions of state Off. */
	if (state_chart_check_main_region_Automatic_Mode_tr0_tr0(handle) == bool_true)
 28a:	8d 81       	ldd	r24, Y+5	; 0x05
 28c:	81 11       	cpse	r24, r1
 28e:	33 c0       	rjmp	.+102    	; 0x2f6 <state_chart_runCycle+0x13c>
	{ 
		state_chart_effect_main_region_Automatic_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_Mode_r1_Off_tr0_tr0(handle) == bool_true)
 290:	8e 81       	ldd	r24, Y+6	; 0x06
 292:	88 23       	and	r24, r24
 294:	09 f4       	brne	.+2      	; 0x298 <state_chart_runCycle+0xde>
 296:	ab cf       	rjmp	.-170    	; 0x1ee <state_chart_runCycle+0x34>

/* Default exit sequence for state Off */
static void state_chart_exseq_main_region_Automatic_Mode_r1_Off(State_chart* handle)
{
	/* Default exit sequence for state Off */
	handle->stateConfVector[0] = State_chart_last_state;
 298:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 29a:	1a 82       	std	Y+2, r1	; 0x02
 29c:	19 82       	std	Y+1, r1	; 0x01

/* Entry action for state 'Dark Waiting'. */
static void state_chart_enact_main_region_Automatic_Mode_r1_Dark_Waiting(State_chart* handle)
{
	/* Entry action for state 'Dark Waiting'. */
	state_chart_setTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Dark_Waiting_tev0_raised) , 5 * 1000, bool_false);
 29e:	00 e0       	ldi	r16, 0x00	; 0
 2a0:	28 e8       	ldi	r18, 0x88	; 136
 2a2:	33 e1       	ldi	r19, 0x13	; 19
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	be 01       	movw	r22, r28
 2aa:	68 5f       	subi	r22, 0xF8	; 248
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	ce 01       	movw	r24, r28
 2b0:	0e 94 75 03 	call	0x6ea	; 0x6ea <state_chart_setTimer>
/* 'default' enter sequence for state Dark Waiting */
static void state_chart_enseq_main_region_Automatic_Mode_r1_Dark_Waiting_default(State_chart* handle)
{
	/* 'default' enter sequence for state Dark Waiting */
	state_chart_enact_main_region_Automatic_Mode_r1_Dark_Waiting(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_Mode_r1_Dark_Waiting;
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	88 83       	st	Y, r24
{
	
	state_chart_clearOutEvents(handle);
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < STATE_CHART_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++)
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	9a 83       	std	Y+2, r25	; 0x02
 2be:	89 83       	std	Y+1, r24	; 0x01
 2c0:	9d cf       	rjmp	.-198    	; 0x1fc <state_chart_runCycle+0x42>

/* The reactions of state Dark Waiting. */
static void state_chart_react_main_region_Automatic_Mode_r1_Dark_Waiting(State_chart* handle)
{
	/* The reactions of state Dark Waiting. */
	if (state_chart_check_main_region_Automatic_Mode_tr0_tr0(handle) == bool_true)
 2c2:	8d 81       	ldd	r24, Y+5	; 0x05
 2c4:	81 11       	cpse	r24, r1
 2c6:	17 c0       	rjmp	.+46     	; 0x2f6 <state_chart_runCycle+0x13c>
	{ 
		state_chart_effect_main_region_Automatic_Mode_tr0(handle);
	}  else
	{
		if (state_chart_check_main_region_Automatic_Mode_r1_Dark_Waiting_tr0_tr0(handle) == bool_true)
 2c8:	88 85       	ldd	r24, Y+8	; 0x08
 2ca:	81 11       	cpse	r24, r1
 2cc:	26 c0       	rjmp	.+76     	; 0x31a <state_chart_runCycle+0x160>
		{ 
			state_chart_effect_main_region_Automatic_Mode_r1_Dark_Waiting_tr0(handle);
		}  else
		{
			if (state_chart_check_main_region_Automatic_Mode_r1_Dark_Waiting_tr1_tr1(handle) == bool_true)
 2ce:	8f 81       	ldd	r24, Y+7	; 0x07
 2d0:	88 23       	and	r24, r24
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <state_chart_runCycle+0x11c>
 2d4:	8c cf       	rjmp	.-232    	; 0x1ee <state_chart_runCycle+0x34>

/* Default exit sequence for state Dark Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_r1_Dark_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Dark Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
 2d6:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 2d8:	1a 82       	std	Y+2, r1	; 0x02
 2da:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Dark Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_r1_Dark_Waiting(State_chart* handle)
{
	/* Exit action for state 'Dark Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Dark_Waiting_tev0_raised) );		
 2dc:	be 01       	movw	r22, r28
 2de:	68 5f       	subi	r22, 0xF8	; 248
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Bright_Waiting_tev0_raised) );		
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 cf 03 	call	0x79e	; 0x79e <state_chart_unsetTimer>

/* Entry action for state 'Off'. */
static void state_chart_enact_main_region_Automatic_Mode_r1_Off(State_chart* handle)
{
	/* Entry action for state 'Off'. */
	state_chartIface_setLight(handle, bool_false);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	ce 01       	movw	r24, r28
 2ec:	0e 94 51 04 	call	0x8a2	; 0x8a2 <state_chartIface_setLight>
/* 'default' enter sequence for state Off */
static void state_chart_enseq_main_region_Automatic_Mode_r1_Off_default(State_chart* handle)
{
	/* 'default' enter sequence for state Off */
	state_chart_enact_main_region_Automatic_Mode_r1_Off(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_Mode_r1_Off;
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	88 83       	st	Y, r24
 2f4:	e1 cf       	rjmp	.-62     	; 0x2b8 <state_chart_runCycle+0xfe>
static void state_chart_react_main_region_Automatic_Mode_r1_Off(State_chart* handle)
{
	/* The reactions of state Off. */
	if (state_chart_check_main_region_Automatic_Mode_tr0_tr0(handle) == bool_true)
	{ 
		state_chart_effect_main_region_Automatic_Mode_tr0(handle);
 2f6:	ce 01       	movw	r24, r28
 2f8:	0e 94 66 00 	call	0xcc	; 0xcc <state_chart_effect_main_region_Automatic_Mode_tr0>
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	9a 81       	ldd	r25, Y+2	; 0x02
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	78 cf       	rjmp	.-272    	; 0x1f4 <state_chart_runCycle+0x3a>
static void state_chart_react_main_region_Manual_Mode_r1_Off(State_chart* handle)
{
	/* The reactions of state Off. */
	if (state_chart_check_main_region_Manual_Mode_tr0_tr0(handle) == bool_true)
	{ 
		state_chart_effect_main_region_Manual_Mode_tr0(handle);
 304:	ce 01       	movw	r24, r28
 306:	0e 94 50 00 	call	0xa0	; 0xa0 <state_chart_effect_main_region_Manual_Mode_tr0>
 30a:	71 cf       	rjmp	.-286    	; 0x1ee <state_chart_runCycle+0x34>

/* Default exit sequence for state Bright Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Bright Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
 30c:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 30e:	1a 82       	std	Y+2, r1	; 0x02
 310:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Bright_Waiting_tev0_raised) );		
 312:	be 01       	movw	r22, r28
 314:	67 5f       	subi	r22, 0xF7	; 247
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	e4 cf       	rjmp	.-56     	; 0x2e2 <state_chart_runCycle+0x128>

/* Default exit sequence for state Dark Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_r1_Dark_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Dark Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
 31a:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 31c:	1a 82       	std	Y+2, r1	; 0x02
 31e:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Dark Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_r1_Dark_Waiting(State_chart* handle)
{
	/* Exit action for state 'Dark Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Dark_Waiting_tev0_raised) );		
 320:	be 01       	movw	r22, r28
 322:	68 5f       	subi	r22, 0xF8	; 248
 324:	7f 4f       	sbci	r23, 0xFF	; 255

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Bright_Waiting_tev0_raised) );		
 326:	ce 01       	movw	r24, r28
 328:	0e 94 cf 03 	call	0x79e	; 0x79e <state_chart_unsetTimer>

/* Entry action for state 'On'. */
static void state_chart_enact_main_region_Automatic_Mode_r1_On(State_chart* handle)
{
	/* Entry action for state 'On'. */
	state_chartIface_setLight(handle, bool_true);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	ce 01       	movw	r24, r28
 330:	0e 94 51 04 	call	0x8a2	; 0x8a2 <state_chartIface_setLight>
/* 'default' enter sequence for state On */
static void state_chart_enseq_main_region_Automatic_Mode_r1_On_default(State_chart* handle)
{
	/* 'default' enter sequence for state On */
	state_chart_enact_main_region_Automatic_Mode_r1_On(handle);
	handle->stateConfVector[0] = State_chart_main_region_Automatic_Mode_r1_On;
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	88 83       	st	Y, r24
 338:	bf cf       	rjmp	.-130    	; 0x2b8 <state_chart_runCycle+0xfe>

/* Default exit sequence for state Bright Waiting */
static void state_chart_exseq_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Default exit sequence for state Bright Waiting */
	handle->stateConfVector[0] = State_chart_last_state;
 33a:	18 82       	st	Y, r1
	handle->stateConfVectorPosition = 0;
 33c:	1a 82       	std	Y+2, r1	; 0x02
 33e:	19 82       	std	Y+1, r1	; 0x01

/* Exit action for state 'Bright Waiting'. */
static void state_chart_exact_main_region_Automatic_Mode_r1_Bright_Waiting(State_chart* handle)
{
	/* Exit action for state 'Bright Waiting'. */
	state_chart_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.state_chart_main_region_Automatic_Mode_r1_Bright_Waiting_tev0_raised) );		
 340:	be 01       	movw	r22, r28
 342:	67 5f       	subi	r22, 0xF7	; 247
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	ef cf       	rjmp	.-34     	; 0x326 <state_chart_runCycle+0x16c>

00000348 <state_chart_raiseTimeEvent>:
	state_chart_clearInEvents(handle);
}

void state_chart_raiseTimeEvent(const State_chart* handle, sc_eventid evid)
{
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
 348:	9c 01       	movw	r18, r24
 34a:	28 5f       	subi	r18, 0xF8	; 248
 34c:	3f 4f       	sbci	r19, 0xFF	; 255
 34e:	62 17       	cp	r22, r18
 350:	73 07       	cpc	r23, r19
 352:	3c f0       	brlt	.+14     	; 0x362 <state_chart_raiseTimeEvent+0x1a>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + sizeof(State_chartTimeEvents))
 354:	0a 96       	adiw	r24, 0x0a	; 10
 356:	68 17       	cp	r22, r24
 358:	79 07       	cpc	r23, r25
 35a:	18 f4       	brcc	.+6      	; 0x362 <state_chart_raiseTimeEvent+0x1a>
		{
		*(sc_boolean*)evid = bool_true;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	fb 01       	movw	r30, r22
 360:	80 83       	st	Z, r24
 362:	08 95       	ret

00000364 <state_chart_isStateActive>:
	}		
}

sc_boolean state_chart_isStateActive(const State_chart* handle, State_chartStates state)
{
 364:	dc 01       	movw	r26, r24
	sc_boolean result = bool_false;
	switch (state)
 366:	46 2f       	mov	r20, r22
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	41 50       	subi	r20, 0x01	; 1
 36c:	51 09       	sbc	r21, r1
 36e:	48 30       	cpi	r20, 0x08	; 8
 370:	51 05       	cpc	r21, r1
 372:	48 f4       	brcc	.+18     	; 0x386 <state_chart_isStateActive+0x22>
 374:	4c 5c       	subi	r20, 0xCC	; 204
 376:	5f 4f       	sbci	r21, 0xFF	; 255
 378:	fa 01       	movw	r30, r20
 37a:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__tablejump2__>
		case State_chart_main_region_Automatic_Mode_r1_Dark_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_DARK_WAITING] == State_chart_main_region_Automatic_Mode_r1_Dark_Waiting
			);
			break;
		case State_chart_main_region_Automatic_Mode_r1_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_r1_Bright_Waiting
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	9c 91       	ld	r25, X
 382:	98 30       	cpi	r25, 0x08	; 8
 384:	09 f0       	breq	.+2      	; 0x388 <state_chart_isStateActive+0x24>
			);
			break;
		default:
			result = bool_false;
 386:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	return result;
}
 388:	08 95       	ret
		case State_chart_main_region_Automatic_Mode_r1_On :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_ON] == State_chart_main_region_Automatic_Mode_r1_On
			);
			break;
		case State_chart_main_region_Automatic_Mode_r1_Dark_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_DARK_WAITING] == State_chart_main_region_Automatic_Mode_r1_Dark_Waiting
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	9c 91       	ld	r25, X
 38e:	97 30       	cpi	r25, 0x07	; 7
 390:	d9 f3       	breq	.-10     	; 0x388 <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_r1_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_r1_Bright_Waiting
			);
			break;
		default:
			result = bool_false;
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	f9 cf       	rjmp	.-14     	; 0x388 <state_chart_isStateActive+0x24>
	sc_boolean result = bool_false;
	switch (state)
	{
		case State_chart_main_region_Manual_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE] >= State_chart_main_region_Manual_Mode
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE] <= State_chart_main_region_Manual_Mode_r1_On);
 396:	9c 91       	ld	r25, X
 398:	91 50       	subi	r25, 0x01	; 1
{
	sc_boolean result = bool_false;
	switch (state)
	{
		case State_chart_main_region_Manual_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE] >= State_chart_main_region_Manual_Mode
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	93 30       	cpi	r25, 0x03	; 3
 39e:	98 f7       	brcc	.-26     	; 0x386 <state_chart_isStateActive+0x22>
		default:
			result = bool_false;
			break;
	}
	return result;
}
 3a0:	08 95       	ret
		case State_chart_main_region_Manual_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE] >= State_chart_main_region_Manual_Mode
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE] <= State_chart_main_region_Manual_Mode_r1_On);
			break;
		case State_chart_main_region_Manual_Mode_r1_Off :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE_R1_OFF] == State_chart_main_region_Manual_Mode_r1_Off
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	9c 91       	ld	r25, X
 3a6:	92 30       	cpi	r25, 0x02	; 2
 3a8:	79 f3       	breq	.-34     	; 0x388 <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_r1_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_r1_Bright_Waiting
			);
			break;
		default:
			result = bool_false;
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	ed cf       	rjmp	.-38     	; 0x388 <state_chart_isStateActive+0x24>
		case State_chart_main_region_Manual_Mode_r1_Off :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE_R1_OFF] == State_chart_main_region_Manual_Mode_r1_Off
			);
			break;
		case State_chart_main_region_Manual_Mode_r1_On :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE_R1_ON] == State_chart_main_region_Manual_Mode_r1_On
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	9c 91       	ld	r25, X
 3b2:	93 30       	cpi	r25, 0x03	; 3
 3b4:	49 f3       	breq	.-46     	; 0x388 <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_r1_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_r1_Bright_Waiting
			);
			break;
		default:
			result = bool_false;
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	e7 cf       	rjmp	.-50     	; 0x388 <state_chart_isStateActive+0x24>
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE_R1_ON] == State_chart_main_region_Manual_Mode_r1_On
			);
			break;
		case State_chart_main_region_Automatic_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE] >= State_chart_main_region_Automatic_Mode
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE] <= State_chart_main_region_Automatic_Mode_r1_Bright_Waiting);
 3ba:	9c 91       	ld	r25, X
 3bc:	94 50       	subi	r25, 0x04	; 4
		case State_chart_main_region_Manual_Mode_r1_On :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_MANUAL_MODE_R1_ON] == State_chart_main_region_Manual_Mode_r1_On
			);
			break;
		case State_chart_main_region_Automatic_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE] >= State_chart_main_region_Automatic_Mode
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	95 30       	cpi	r25, 0x05	; 5
 3c2:	08 f7       	brcc	.-62     	; 0x386 <state_chart_isStateActive+0x22>
		default:
			result = bool_false;
			break;
	}
	return result;
}
 3c4:	08 95       	ret
		case State_chart_main_region_Automatic_Mode :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE] >= State_chart_main_region_Automatic_Mode
				&& handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE] <= State_chart_main_region_Automatic_Mode_r1_Bright_Waiting);
			break;
		case State_chart_main_region_Automatic_Mode_r1_Off :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_OFF] == State_chart_main_region_Automatic_Mode_r1_Off
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	9c 91       	ld	r25, X
 3ca:	95 30       	cpi	r25, 0x05	; 5
 3cc:	e9 f2       	breq	.-70     	; 0x388 <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_r1_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_r1_Bright_Waiting
			);
			break;
		default:
			result = bool_false;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	db cf       	rjmp	.-74     	; 0x388 <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_r1_Off :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_OFF] == State_chart_main_region_Automatic_Mode_r1_Off
			);
			break;
		case State_chart_main_region_Automatic_Mode_r1_On :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_ON] == State_chart_main_region_Automatic_Mode_r1_On
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	9c 91       	ld	r25, X
 3d6:	96 30       	cpi	r25, 0x06	; 6
 3d8:	b9 f2       	breq	.-82     	; 0x388 <state_chart_isStateActive+0x24>
		case State_chart_main_region_Automatic_Mode_r1_Bright_Waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_STATE_CHART_MAIN_REGION_AUTOMATIC_MODE_R1_BRIGHT_WAITING] == State_chart_main_region_Automatic_Mode_r1_Bright_Waiting
			);
			break;
		default:
			result = bool_false;
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	d5 cf       	rjmp	.-86     	; 0x388 <state_chart_isStateActive+0x24>

000003de <state_chartIface_raise_key_On>:
	return result;
}

void state_chartIface_raise_key_On(State_chart* handle)
{
	handle->iface.key_On_raised = bool_true;
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	fc 01       	movw	r30, r24
 3e2:	23 83       	std	Z+3, r18	; 0x03
 3e4:	08 95       	ret

000003e6 <state_chartIface_raise_key_Off>:
}
void state_chartIface_raise_key_Off(State_chart* handle)
{
	handle->iface.key_Off_raised = bool_true;
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	fc 01       	movw	r30, r24
 3ea:	24 83       	std	Z+4, r18	; 0x04
 3ec:	08 95       	ret

000003ee <state_chartIface_raise_key_Mode>:
}
void state_chartIface_raise_key_Mode(State_chart* handle)
{
	handle->iface.key_Mode_raised = bool_true;
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	fc 01       	movw	r30, r24
 3f2:	25 83       	std	Z+5, r18	; 0x05
 3f4:	08 95       	ret

000003f6 <state_chartIface_raise_when_Dark>:
}
void state_chartIface_raise_when_Dark(State_chart* handle)
{
	handle->iface.when_Dark_raised = bool_true;
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	fc 01       	movw	r30, r24
 3fa:	26 83       	std	Z+6, r18	; 0x06
 3fc:	08 95       	ret

000003fe <state_chartIface_raise_when_Bright>:
}
void state_chartIface_raise_when_Bright(State_chart* handle)
{
	handle->iface.when_Bright_raised = bool_true;
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	fc 01       	movw	r30, r24
 402:	27 83       	std	Z+7, r18	; 0x07
 404:	08 95       	ret

00000406 <sc_timer_start>:



/*! Starts a timer with the specified parameters. */
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {
 406:	6f 92       	push	r6
 408:	7f 92       	push	r7
 40a:	8f 92       	push	r8
 40c:	9f 92       	push	r9
 40e:	af 92       	push	r10
 410:	bf 92       	push	r11
 412:	cf 92       	push	r12
 414:	df 92       	push	r13
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	ce 2d       	mov	r28, r14


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
 422:	dc 01       	movw	r26, r24
 424:	8d 90       	ld	r8, X+
 426:	9d 90       	ld	r9, X+
 428:	ad 90       	ld	r10, X+
 42a:	bc 90       	ld	r11, X
 42c:	13 97       	sbiw	r26, 0x03	; 3
 42e:	18 14       	cp	r1, r8
 430:	19 04       	cpc	r1, r9
 432:	1a 04       	cpc	r1, r10
 434:	1b 04       	cpc	r1, r11
 436:	1c f5       	brge	.+70     	; 0x47e <sc_timer_start+0x78>

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {
 438:	14 96       	adiw	r26, 0x04	; 4
 43a:	ed 91       	ld	r30, X+
 43c:	fc 91       	ld	r31, X
 43e:	15 97       	sbiw	r26, 0x05	; 5
 440:	a1 85       	ldd	r26, Z+9	; 0x09
 442:	b2 85       	ldd	r27, Z+10	; 0x0a
 444:	ab 2b       	or	r26, r27
 446:	49 f1       	breq	.+82     	; 0x49a <sc_timer_start+0x94>
 448:	3f 01       	movw	r6, r30
 44a:	bf e0       	ldi	r27, 0x0F	; 15
 44c:	6b 0e       	add	r6, r27
 44e:	71 1c       	adc	r7, r1
 450:	c1 2c       	mov	r12, r1
 452:	d1 2c       	mov	r13, r1
 454:	76 01       	movw	r14, r12
 456:	c3 94       	inc	r12
 458:	0d c0       	rjmp	.+26     	; 0x474 <sc_timer_start+0x6e>
 45a:	f3 01       	movw	r30, r6
 45c:	bf ef       	ldi	r27, 0xFF	; 255
 45e:	cb 1a       	sub	r12, r27
 460:	db 0a       	sbc	r13, r27
 462:	eb 0a       	sbc	r14, r27
 464:	fb 0a       	sbc	r15, r27
 466:	af e0       	ldi	r26, 0x0F	; 15
 468:	6a 0e       	add	r6, r26
 46a:	71 1c       	adc	r7, r1
 46c:	a1 85       	ldd	r26, Z+9	; 0x09
 46e:	b2 85       	ldd	r27, Z+10	; 0x0a
 470:	ab 2b       	or	r26, r27
 472:	99 f0       	breq	.+38     	; 0x49a <sc_timer_start+0x94>
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
 474:	c8 14       	cp	r12, r8
 476:	d9 04       	cpc	r13, r9
 478:	ea 04       	cpc	r14, r10
 47a:	fb 04       	cpc	r15, r11
 47c:	71 f7       	brne	.-36     	; 0x45a <sc_timer_start+0x54>

			break;
		}
	}

}
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	ff 90       	pop	r15
 486:	ef 90       	pop	r14
 488:	df 90       	pop	r13
 48a:	cf 90       	pop	r12
 48c:	bf 90       	pop	r11
 48e:	af 90       	pop	r10
 490:	9f 90       	pop	r9
 492:	8f 90       	pop	r8
 494:	7f 90       	pop	r7
 496:	6f 90       	pop	r6
 498:	08 95       	ret

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {

			/* set timer properties */
			this->timers[i].pt_evid = evid;
 49a:	52 87       	std	Z+10, r21	; 0x0a
 49c:	41 87       	std	Z+9, r20	; 0x09
			this->timers[i].time_ms = time_ms;
 49e:	00 83       	st	Z, r16
 4a0:	11 83       	std	Z+1, r17	; 0x01
 4a2:	22 83       	std	Z+2, r18	; 0x02
 4a4:	33 83       	std	Z+3, r19	; 0x03
			this->timers[i].periodic = periodic;
 4a6:	c4 83       	std	Z+4, r28	; 0x04
			this->timers[i].handle = handle;
 4a8:	74 87       	std	Z+12, r23	; 0x0c
 4aa:	63 87       	std	Z+11, r22	; 0x0b
			this->timers[i].service = this;
 4ac:	96 87       	std	Z+14, r25	; 0x0e
 4ae:	85 87       	std	Z+13, r24	; 0x0d

			// reset the elapsed time ...
			this->timers[i].elapsed_time_ms = 0;
 4b0:	15 82       	std	Z+5, r1	; 0x05
 4b2:	16 82       	std	Z+6, r1	; 0x06
 4b4:	17 82       	std	Z+7, r1	; 0x07
 4b6:	10 86       	std	Z+8, r1	; 0x08

			break;
 4b8:	e2 cf       	rjmp	.-60     	; 0x47e <sc_timer_start+0x78>

000004ba <sc_timer_cancel>:

}


/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	8b 01       	movw	r16, r22

	int i;

	for (i = 0; i < this->timer_count; i++) {
 4c4:	dc 01       	movw	r26, r24
 4c6:	4d 91       	ld	r20, X+
 4c8:	5d 91       	ld	r21, X+
 4ca:	6d 91       	ld	r22, X+
 4cc:	7c 91       	ld	r23, X
 4ce:	13 97       	sbiw	r26, 0x03	; 3
 4d0:	14 16       	cp	r1, r20
 4d2:	15 06       	cpc	r1, r21
 4d4:	16 06       	cpc	r1, r22
 4d6:	17 06       	cpc	r1, r23
 4d8:	0c f5       	brge	.+66     	; 0x51c <sc_timer_cancel+0x62>
		if (this->timers[i].pt_evid == evid) {
 4da:	14 96       	adiw	r26, 0x04	; 4
 4dc:	ed 91       	ld	r30, X+
 4de:	fc 91       	ld	r31, X
 4e0:	15 97       	sbiw	r26, 0x05	; 5
 4e2:	81 85       	ldd	r24, Z+9	; 0x09
 4e4:	92 85       	ldd	r25, Z+10	; 0x0a
 4e6:	80 17       	cp	r24, r16
 4e8:	91 07       	cpc	r25, r17
 4ea:	e9 f0       	breq	.+58     	; 0x526 <sc_timer_cancel+0x6c>
 4ec:	9f 01       	movw	r18, r30
 4ee:	21 5f       	subi	r18, 0xF1	; 241
 4f0:	3f 4f       	sbci	r19, 0xFF	; 255
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	a0 e0       	ldi	r26, 0x00	; 0
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	0b c0       	rjmp	.+22     	; 0x512 <sc_timer_cancel+0x58>
 4fc:	f9 01       	movw	r30, r18
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	a1 1d       	adc	r26, r1
 502:	b1 1d       	adc	r27, r1
 504:	21 5f       	subi	r18, 0xF1	; 241
 506:	3f 4f       	sbci	r19, 0xFF	; 255
 508:	c1 85       	ldd	r28, Z+9	; 0x09
 50a:	d2 85       	ldd	r29, Z+10	; 0x0a
 50c:	c0 17       	cp	r28, r16
 50e:	d1 07       	cpc	r29, r17
 510:	51 f0       	breq	.+20     	; 0x526 <sc_timer_cancel+0x6c>
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
 512:	84 17       	cp	r24, r20
 514:	95 07       	cpc	r25, r21
 516:	a6 07       	cpc	r26, r22
 518:	b7 07       	cpc	r27, r23
 51a:	81 f7       	brne	.-32     	; 0x4fc <sc_timer_cancel+0x42>
			this->timers[i].handle = NULL;

			break;
		}
	}
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	0f 91       	pop	r16
 524:	08 95       	ret
	int i;

	for (i = 0; i < this->timer_count; i++) {
		if (this->timers[i].pt_evid == evid) {

			this->timers[i].pt_evid = NULL;
 526:	12 86       	std	Z+10, r1	; 0x0a
 528:	11 86       	std	Z+9, r1	; 0x09
			this->timers[i].handle = NULL;
 52a:	14 86       	std	Z+12, r1	; 0x0c
 52c:	13 86       	std	Z+11, r1	; 0x0b

			break;
		}
	}
}
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	08 95       	ret

00000538 <sc_timer_service_init>:

/*! Initializes a timer service with a set of timers. */
void sc_timer_service_init(sc_timer_service_t *tservice,
	sc_timer_t *timers,
	sc_integer count,
	sc_raise_time_event_fp raise_event) {
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	fc 01       	movw	r30, r24

	tservice->timers = timers;
 53e:	75 83       	std	Z+5, r23	; 0x05
 540:	64 83       	std	Z+4, r22	; 0x04
	tservice->timer_count = count;
 542:	20 83       	st	Z, r18
 544:	31 83       	std	Z+1, r19	; 0x01
 546:	42 83       	std	Z+2, r20	; 0x02
 548:	53 83       	std	Z+3, r21	; 0x03
	for (int i=0; i<count; i++) {
 54a:	12 16       	cp	r1, r18
 54c:	13 06       	cpc	r1, r19
 54e:	14 06       	cpc	r1, r20
 550:	15 06       	cpc	r1, r21
 552:	4c f4       	brge	.+18     	; 0x566 <sc_timer_service_init+0x2e>
 554:	db 01       	movw	r26, r22
 556:	1a 96       	adiw	r26, 0x0a	; 10
 558:	1c 92       	st	X, r1
 55a:	1e 92       	st	-X, r1
 55c:	19 97       	sbiw	r26, 0x09	; 9
 55e:	1e 96       	adiw	r26, 0x0e	; 14
 560:	9c 93       	st	X, r25
 562:	8e 93       	st	-X, r24
 564:	1d 97       	sbiw	r26, 0x0d	; 13
		tservice->timers->pt_evid = NULL;
		tservice->timers->service = tservice;
	}

	tservice->raise_event = raise_event;
 566:	17 83       	std	Z+7, r17	; 0x07
 568:	06 83       	std	Z+6, r16	; 0x06
}
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	08 95       	ret

00000570 <sc_timer_service_proceed>:


void sc_timer_service_proceed(sc_timer_service_t *this, const sc_integer time_ms) {
 570:	2f 92       	push	r2
 572:	3f 92       	push	r3
 574:	4f 92       	push	r4
 576:	5f 92       	push	r5
 578:	6f 92       	push	r6
 57a:	7f 92       	push	r7
 57c:	8f 92       	push	r8
 57e:	9f 92       	push	r9
 580:	af 92       	push	r10
 582:	bf 92       	push	r11
 584:	cf 92       	push	r12
 586:	df 92       	push	r13
 588:	ef 92       	push	r14
 58a:	ff 92       	push	r15
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	28 97       	sbiw	r28, 0x08	; 8
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	1c 01       	movw	r2, r24
 5a6:	49 83       	std	Y+1, r20	; 0x01
 5a8:	5a 83       	std	Y+2, r21	; 0x02
 5aa:	6b 83       	std	Y+3, r22	; 0x03
 5ac:	7c 83       	std	Y+4, r23	; 0x04

	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
 5ae:	fc 01       	movw	r30, r24
 5b0:	80 80       	ld	r8, Z
 5b2:	91 80       	ldd	r9, Z+1	; 0x01
 5b4:	a2 80       	ldd	r10, Z+2	; 0x02
 5b6:	b3 80       	ldd	r11, Z+3	; 0x03
 5b8:	18 14       	cp	r1, r8
 5ba:	19 04       	cpc	r1, r9
 5bc:	1a 04       	cpc	r1, r10
 5be:	1b 04       	cpc	r1, r11
 5c0:	0c f0       	brlt	.+2      	; 0x5c4 <sc_timer_service_proceed+0x54>
 5c2:	7a c0       	rjmp	.+244    	; 0x6b8 <sc_timer_service_proceed+0x148>
 5c4:	c1 2c       	mov	r12, r1
 5c6:	d1 2c       	mov	r13, r1
 5c8:	76 01       	movw	r14, r12
 5ca:	c3 94       	inc	r12
 5cc:	18 86       	std	Y+8, r1	; 0x08
 5ce:	1f 82       	std	Y+7, r1	; 0x07
 5d0:	84 81       	ldd	r24, Z+4	; 0x04
 5d2:	95 81       	ldd	r25, Z+5	; 0x05
 5d4:	13 c0       	rjmp	.+38     	; 0x5fc <sc_timer_service_proceed+0x8c>
 5d6:	b7 01       	movw	r22, r14
 5d8:	a6 01       	movw	r20, r12
 5da:	2f 81       	ldd	r18, Y+7	; 0x07
 5dc:	38 85       	ldd	r19, Y+8	; 0x08
 5de:	21 5f       	subi	r18, 0xF1	; 241
 5e0:	3f 4f       	sbci	r19, 0xFF	; 255
 5e2:	38 87       	std	Y+8, r19	; 0x08
 5e4:	2f 83       	std	Y+7, r18	; 0x07
 5e6:	3f ef       	ldi	r19, 0xFF	; 255
 5e8:	c3 1a       	sub	r12, r19
 5ea:	d3 0a       	sbc	r13, r19
 5ec:	e3 0a       	sbc	r14, r19
 5ee:	f3 0a       	sbc	r15, r19
 5f0:	48 15       	cp	r20, r8
 5f2:	59 05       	cpc	r21, r9
 5f4:	6a 05       	cpc	r22, r10
 5f6:	7b 05       	cpc	r23, r11
 5f8:	0c f0       	brlt	.+2      	; 0x5fc <sc_timer_service_proceed+0x8c>
 5fa:	5e c0       	rjmp	.+188    	; 0x6b8 <sc_timer_service_proceed+0x148>

		/* ... and process all used. */
		if (this->timers[i].pt_evid != NULL) {
 5fc:	af 81       	ldd	r26, Y+7	; 0x07
 5fe:	b8 85       	ldd	r27, Y+8	; 0x08
 600:	a8 0f       	add	r26, r24
 602:	b9 1f       	adc	r27, r25
 604:	19 96       	adiw	r26, 0x09	; 9
 606:	2d 91       	ld	r18, X+
 608:	3c 91       	ld	r19, X
 60a:	1a 97       	sbiw	r26, 0x0a	; 10
 60c:	3e 83       	std	Y+6, r19	; 0x06
 60e:	2d 83       	std	Y+5, r18	; 0x05
 610:	23 2b       	or	r18, r19
 612:	09 f3       	breq	.-62     	; 0x5d6 <sc_timer_service_proceed+0x66>

			if (this->timers[i].elapsed_time_ms < this->timers[i].time_ms) {
 614:	15 96       	adiw	r26, 0x05	; 5
 616:	4d 90       	ld	r4, X+
 618:	5d 90       	ld	r5, X+
 61a:	6d 90       	ld	r6, X+
 61c:	7c 90       	ld	r7, X
 61e:	18 97       	sbiw	r26, 0x08	; 8
 620:	0d 91       	ld	r16, X+
 622:	1d 91       	ld	r17, X+
 624:	2d 91       	ld	r18, X+
 626:	3c 91       	ld	r19, X
 628:	13 97       	sbiw	r26, 0x03	; 3
 62a:	40 16       	cp	r4, r16
 62c:	51 06       	cpc	r5, r17
 62e:	62 06       	cpc	r6, r18
 630:	73 06       	cpc	r7, r19
 632:	8c f6       	brge	.-94     	; 0x5d6 <sc_timer_service_proceed+0x66>
				this->timers[i].elapsed_time_ms += time_ms;
 634:	49 81       	ldd	r20, Y+1	; 0x01
 636:	5a 81       	ldd	r21, Y+2	; 0x02
 638:	6b 81       	ldd	r22, Y+3	; 0x03
 63a:	7c 81       	ldd	r23, Y+4	; 0x04
 63c:	44 0e       	add	r4, r20
 63e:	55 1e       	adc	r5, r21
 640:	66 1e       	adc	r6, r22
 642:	77 1e       	adc	r7, r23
 644:	15 96       	adiw	r26, 0x05	; 5
 646:	4d 92       	st	X+, r4
 648:	5d 92       	st	X+, r5
 64a:	6d 92       	st	X+, r6
 64c:	7c 92       	st	X, r7
 64e:	18 97       	sbiw	r26, 0x08	; 8

				if (this->timers[i].elapsed_time_ms >= this->timers[i].time_ms) {
 650:	40 16       	cp	r4, r16
 652:	51 06       	cpc	r5, r17
 654:	62 06       	cpc	r6, r18
 656:	73 06       	cpc	r7, r19
 658:	0c f4       	brge	.+2      	; 0x65c <sc_timer_service_proceed+0xec>
 65a:	bd cf       	rjmp	.-134    	; 0x5d6 <sc_timer_service_proceed+0x66>


/*! Callback that is called when a timer fires. */
static void sc_timer_fired(sc_timer_t *timer) {

	timer->service->raise_event(timer->handle, timer->pt_evid);
 65c:	1d 96       	adiw	r26, 0x0d	; 13
 65e:	ed 91       	ld	r30, X+
 660:	fc 91       	ld	r31, X
 662:	1e 97       	sbiw	r26, 0x0e	; 14
 664:	06 80       	ldd	r0, Z+6	; 0x06
 666:	f7 81       	ldd	r31, Z+7	; 0x07
 668:	e0 2d       	mov	r30, r0
 66a:	6d 81       	ldd	r22, Y+5	; 0x05
 66c:	7e 81       	ldd	r23, Y+6	; 0x06
 66e:	1b 96       	adiw	r26, 0x0b	; 11
 670:	8d 91       	ld	r24, X+
 672:	9c 91       	ld	r25, X
 674:	1c 97       	sbiw	r26, 0x0c	; 12
 676:	09 95       	icall
			if (this->timers[i].elapsed_time_ms < this->timers[i].time_ms) {
				this->timers[i].elapsed_time_ms += time_ms;

				if (this->timers[i].elapsed_time_ms >= this->timers[i].time_ms) {
					sc_timer_fired(&(this->timers[i]));
					if (this->timers[i].periodic) {
 678:	f1 01       	movw	r30, r2
 67a:	84 81       	ldd	r24, Z+4	; 0x04
 67c:	95 81       	ldd	r25, Z+5	; 0x05
 67e:	ef 81       	ldd	r30, Y+7	; 0x07
 680:	f8 85       	ldd	r31, Y+8	; 0x08
 682:	e8 0f       	add	r30, r24
 684:	f9 1f       	adc	r31, r25
 686:	24 81       	ldd	r18, Z+4	; 0x04
 688:	22 23       	and	r18, r18
 68a:	81 f0       	breq	.+32     	; 0x6ac <sc_timer_service_proceed+0x13c>
						this->timers[i].elapsed_time_ms -= this->timers[i].time_ms;
 68c:	45 81       	ldd	r20, Z+5	; 0x05
 68e:	56 81       	ldd	r21, Z+6	; 0x06
 690:	67 81       	ldd	r22, Z+7	; 0x07
 692:	70 85       	ldd	r23, Z+8	; 0x08
 694:	00 81       	ld	r16, Z
 696:	11 81       	ldd	r17, Z+1	; 0x01
 698:	22 81       	ldd	r18, Z+2	; 0x02
 69a:	33 81       	ldd	r19, Z+3	; 0x03
 69c:	40 1b       	sub	r20, r16
 69e:	51 0b       	sbc	r21, r17
 6a0:	62 0b       	sbc	r22, r18
 6a2:	73 0b       	sbc	r23, r19
 6a4:	45 83       	std	Z+5, r20	; 0x05
 6a6:	56 83       	std	Z+6, r21	; 0x06
 6a8:	67 83       	std	Z+7, r22	; 0x07
 6aa:	70 87       	std	Z+8, r23	; 0x08
 6ac:	f1 01       	movw	r30, r2
 6ae:	80 80       	ld	r8, Z
 6b0:	91 80       	ldd	r9, Z+1	; 0x01
 6b2:	a2 80       	ldd	r10, Z+2	; 0x02
 6b4:	b3 80       	ldd	r11, Z+3	; 0x03
 6b6:	8f cf       	rjmp	.-226    	; 0x5d6 <sc_timer_service_proceed+0x66>
				}
			}
		}
	}

}
 6b8:	28 96       	adiw	r28, 0x08	; 8
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	cd bf       	out	0x3d, r28	; 61
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	1f 91       	pop	r17
 6ca:	0f 91       	pop	r16
 6cc:	ff 90       	pop	r15
 6ce:	ef 90       	pop	r14
 6d0:	df 90       	pop	r13
 6d2:	cf 90       	pop	r12
 6d4:	bf 90       	pop	r11
 6d6:	af 90       	pop	r10
 6d8:	9f 90       	pop	r9
 6da:	8f 90       	pop	r8
 6dc:	7f 90       	pop	r7
 6de:	6f 90       	pop	r6
 6e0:	5f 90       	pop	r5
 6e2:	4f 90       	pop	r4
 6e4:	3f 90       	pop	r3
 6e6:	2f 90       	pop	r2
 6e8:	08 95       	ret

000006ea <state_chart_setTimer>:
#define CYCLE_PERIOD 10 //number of milliseconds that pass between each statechart cycle<br>
static sc_timer_service_t timer_service;
static sc_timer_t timers[MAX_TIMERS];

//! callback implementation for the setting up time events
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
 6ea:	4f 92       	push	r4
 6ec:	5f 92       	push	r5
 6ee:	6f 92       	push	r6
 6f0:	7f 92       	push	r7
 6f2:	af 92       	push	r10
 6f4:	bf 92       	push	r11
 6f6:	cf 92       	push	r12
 6f8:	df 92       	push	r13
 6fa:	ef 92       	push	r14
 6fc:	ff 92       	push	r15
 6fe:	0f 93       	push	r16
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	db 01       	movw	r26, r22
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
 706:	c0 90 2c 02 	lds	r12, 0x022C
 70a:	d0 90 2d 02 	lds	r13, 0x022D
 70e:	e0 90 2e 02 	lds	r14, 0x022E
 712:	f0 90 2f 02 	lds	r15, 0x022F
 716:	1c 14       	cp	r1, r12
 718:	1d 04       	cpc	r1, r13
 71a:	1e 04       	cpc	r1, r14
 71c:	1f 04       	cpc	r1, r15
 71e:	fc f4       	brge	.+62     	; 0x75e <state_chart_setTimer+0x74>

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {
 720:	c0 91 30 02 	lds	r28, 0x0230
 724:	d0 91 31 02 	lds	r29, 0x0231
 728:	69 85       	ldd	r22, Y+9	; 0x09
 72a:	7a 85       	ldd	r23, Y+10	; 0x0a
 72c:	67 2b       	or	r22, r23
 72e:	29 f1       	breq	.+74     	; 0x77a <state_chart_setTimer+0x90>
 730:	fe 01       	movw	r30, r28
 732:	3f 96       	adiw	r30, 0x0f	; 15
 734:	41 2c       	mov	r4, r1
 736:	51 2c       	mov	r5, r1
 738:	32 01       	movw	r6, r4
 73a:	43 94       	inc	r4
 73c:	0b c0       	rjmp	.+22     	; 0x754 <state_chart_setTimer+0x6a>
 73e:	ef 01       	movw	r28, r30
 740:	6f ef       	ldi	r22, 0xFF	; 255
 742:	46 1a       	sub	r4, r22
 744:	56 0a       	sbc	r5, r22
 746:	66 0a       	sbc	r6, r22
 748:	76 0a       	sbc	r7, r22
 74a:	3f 96       	adiw	r30, 0x0f	; 15
 74c:	a9 84       	ldd	r10, Y+9	; 0x09
 74e:	ba 84       	ldd	r11, Y+10	; 0x0a
 750:	ab 28       	or	r10, r11
 752:	99 f0       	breq	.+38     	; 0x77a <state_chart_setTimer+0x90>
void sc_timer_start(sc_timer_service_t *this, void* handle, const sc_eventid evid,
		const sc_integer time_ms, const sc_boolean periodic) {


	/* go through all timers ... */
	for (int i = 0; i < this->timer_count; i++) {
 754:	4c 14       	cp	r4, r12
 756:	5d 04       	cpc	r5, r13
 758:	6e 04       	cpc	r6, r14
 75a:	7f 04       	cpc	r7, r15
 75c:	81 f7       	brne	.-32     	; 0x73e <state_chart_setTimer+0x54>
static sc_timer_t timers[MAX_TIMERS];

//! callback implementation for the setting up time events
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
    sc_timer_start(&timer_service, (void*) handle, evid, time_ms, periodic);
}
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	0f 91       	pop	r16
 764:	ff 90       	pop	r15
 766:	ef 90       	pop	r14
 768:	df 90       	pop	r13
 76a:	cf 90       	pop	r12
 76c:	bf 90       	pop	r11
 76e:	af 90       	pop	r10
 770:	7f 90       	pop	r7
 772:	6f 90       	pop	r6
 774:	5f 90       	pop	r5
 776:	4f 90       	pop	r4
 778:	08 95       	ret

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == NULL) {

			/* set timer properties */
			this->timers[i].pt_evid = evid;
 77a:	ba 87       	std	Y+10, r27	; 0x0a
 77c:	a9 87       	std	Y+9, r26	; 0x09
			this->timers[i].time_ms = time_ms;
 77e:	28 83       	st	Y, r18
 780:	39 83       	std	Y+1, r19	; 0x01
 782:	4a 83       	std	Y+2, r20	; 0x02
 784:	5b 83       	std	Y+3, r21	; 0x03
			this->timers[i].periodic = periodic;
 786:	0c 83       	std	Y+4, r16	; 0x04
			this->timers[i].handle = handle;
 788:	9c 87       	std	Y+12, r25	; 0x0c
 78a:	8b 87       	std	Y+11, r24	; 0x0b
			this->timers[i].service = this;
 78c:	8c e2       	ldi	r24, 0x2C	; 44
 78e:	92 e0       	ldi	r25, 0x02	; 2
 790:	9e 87       	std	Y+14, r25	; 0x0e
 792:	8d 87       	std	Y+13, r24	; 0x0d

			// reset the elapsed time ...
			this->timers[i].elapsed_time_ms = 0;
 794:	1d 82       	std	Y+5, r1	; 0x05
 796:	1e 82       	std	Y+6, r1	; 0x06
 798:	1f 82       	std	Y+7, r1	; 0x07
 79a:	18 86       	std	Y+8, r1	; 0x08
 79c:	e0 cf       	rjmp	.-64     	; 0x75e <state_chart_setTimer+0x74>

0000079e <state_chart_unsetTimer>:
void state_chart_setTimer(State_chart* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
    sc_timer_start(&timer_service, (void*) handle, evid, time_ms, periodic);
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	8b 01       	movw	r16, r22
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
 7a8:	40 91 2c 02 	lds	r20, 0x022C
 7ac:	50 91 2d 02 	lds	r21, 0x022D
 7b0:	60 91 2e 02 	lds	r22, 0x022E
 7b4:	70 91 2f 02 	lds	r23, 0x022F
 7b8:	14 16       	cp	r1, r20
 7ba:	15 06       	cpc	r1, r21
 7bc:	16 06       	cpc	r1, r22
 7be:	17 06       	cpc	r1, r23
 7c0:	0c f5       	brge	.+66     	; 0x804 <state_chart_unsetTimer+0x66>
		if (this->timers[i].pt_evid == evid) {
 7c2:	e0 91 30 02 	lds	r30, 0x0230
 7c6:	f0 91 31 02 	lds	r31, 0x0231
 7ca:	81 85       	ldd	r24, Z+9	; 0x09
 7cc:	92 85       	ldd	r25, Z+10	; 0x0a
 7ce:	08 17       	cp	r16, r24
 7d0:	19 07       	cpc	r17, r25
 7d2:	e9 f0       	breq	.+58     	; 0x80e <state_chart_unsetTimer+0x70>
 7d4:	9f 01       	movw	r18, r30
 7d6:	21 5f       	subi	r18, 0xF1	; 241
 7d8:	3f 4f       	sbci	r19, 0xFF	; 255
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	a0 e0       	ldi	r26, 0x00	; 0
 7e0:	b0 e0       	ldi	r27, 0x00	; 0
 7e2:	0b c0       	rjmp	.+22     	; 0x7fa <state_chart_unsetTimer+0x5c>
 7e4:	f9 01       	movw	r30, r18
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	a1 1d       	adc	r26, r1
 7ea:	b1 1d       	adc	r27, r1
 7ec:	21 5f       	subi	r18, 0xF1	; 241
 7ee:	3f 4f       	sbci	r19, 0xFF	; 255
 7f0:	c1 85       	ldd	r28, Z+9	; 0x09
 7f2:	d2 85       	ldd	r29, Z+10	; 0x0a
 7f4:	0c 17       	cp	r16, r28
 7f6:	1d 07       	cpc	r17, r29
 7f8:	51 f0       	breq	.+20     	; 0x80e <state_chart_unsetTimer+0x70>
/*! Cancels a timer for the specified time event. */
void sc_timer_cancel(sc_timer_service_t *this, const sc_eventid evid) {

	int i;

	for (i = 0; i < this->timer_count; i++) {
 7fa:	84 17       	cp	r24, r20
 7fc:	95 07       	cpc	r25, r21
 7fe:	a6 07       	cpc	r26, r22
 800:	b7 07       	cpc	r27, r23
 802:	81 f7       	brne	.-32     	; 0x7e4 <state_chart_unsetTimer+0x46>
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
    sc_timer_cancel(&timer_service, evid);
}
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	1f 91       	pop	r17
 80a:	0f 91       	pop	r16
 80c:	08 95       	ret
	int i;

	for (i = 0; i < this->timer_count; i++) {
		if (this->timers[i].pt_evid == evid) {

			this->timers[i].pt_evid = NULL;
 80e:	12 86       	std	Z+10, r1	; 0x0a
 810:	11 86       	std	Z+9, r1	; 0x09
			this->timers[i].handle = NULL;
 812:	14 86       	std	Z+12, r1	; 0x0c
 814:	13 86       	std	Z+11, r1	; 0x0b
}

//! callback implementation for canceling time events.
void state_chart_unsetTimer(State_chart* handle, const sc_eventid evid) {
    sc_timer_cancel(&timer_service, evid);
}
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	08 95       	ret

00000820 <sc_timer_setup>:
void sc_timer_service_init(sc_timer_service_t *tservice,
	sc_timer_t *timers,
	sc_integer count,
	sc_raise_time_event_fp raise_event) {

	tservice->timers = timers;
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	91 e0       	ldi	r25, 0x01	; 1
 824:	90 93 31 02 	sts	0x0231, r25
 828:	80 93 30 02 	sts	0x0230, r24
	tservice->timer_count = count;
 82c:	ec e2       	ldi	r30, 0x2C	; 44
 82e:	f2 e0       	ldi	r31, 0x02	; 2
 830:	84 e1       	ldi	r24, 0x14	; 20
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	a0 e0       	ldi	r26, 0x00	; 0
 836:	b0 e0       	ldi	r27, 0x00	; 0
 838:	80 83       	st	Z, r24
 83a:	91 83       	std	Z+1, r25	; 0x01
 83c:	a2 83       	std	Z+2, r26	; 0x02
 83e:	b3 83       	std	Z+3, r27	; 0x03
 840:	10 92 0a 01 	sts	0x010A, r1
 844:	10 92 09 01 	sts	0x0109, r1
 848:	f0 93 0e 01 	sts	0x010E, r31
 84c:	e0 93 0d 01 	sts	0x010D, r30
	for (int i=0; i<count; i++) {
		tservice->timers->pt_evid = NULL;
		tservice->timers->service = tservice;
	}

	tservice->raise_event = raise_event;
 850:	84 ea       	ldi	r24, 0xA4	; 164
 852:	91 e0       	ldi	r25, 0x01	; 1
 854:	90 93 33 02 	sts	0x0233, r25
 858:	80 93 32 02 	sts	0x0232, r24
 85c:	08 95       	ret

0000085e <sc_timer_increment>:
								(sc_raise_time_event_fp) &state_chart_raiseTimeEvent);
}


void sc_timer_increment(const sc_integer time_ms)
{
 85e:	ab 01       	movw	r20, r22
 860:	bc 01       	movw	r22, r24
	sc_timer_service_proceed(&timer_service, time_ms);
 862:	8c e2       	ldi	r24, 0x2C	; 44
 864:	92 e0       	ldi	r25, 0x02	; 2
 866:	0c 94 b8 02 	jmp	0x570	; 0x570 <sc_timer_service_proceed>

0000086a <main>:
static State_chart sc;


int main(void)
{
	DDRB |= (1<<5);
 86a:	25 9a       	sbi	0x04, 5	; 4

	sc_timer_setup();  //setup the statechart timers
 86c:	0e 94 10 04 	call	0x820	; 0x820 <sc_timer_setup>

	state_chart_init(&sc); //initialize statechart
 870:	84 e3       	ldi	r24, 0x34	; 52
 872:	92 e0       	ldi	r25, 0x02	; 2
 874:	0e 94 95 00 	call	0x12a	; 0x12a <state_chart_init>
	state_chart_enter(&sc); //enter the statechart
 878:	84 e3       	ldi	r24, 0x34	; 52
 87a:	92 e0       	ldi	r25, 0x02	; 2
 87c:	0e 94 a1 00 	call	0x142	; 0x142 <state_chart_enter>

	while(1)
	{
		sc_timer_increment(10);  //increment statechart timer by 10ms
 880:	6a e0       	ldi	r22, 0x0A	; 10
 882:	70 e0       	ldi	r23, 0x00	; 0
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 2f 04 	call	0x85e	; 0x85e <sc_timer_increment>
		state_chart_runCycle(&sc); //"run" the statechart
 88c:	84 e3       	ldi	r24, 0x34	; 52
 88e:	92 e0       	ldi	r25, 0x02	; 2
 890:	0e 94 dd 00 	call	0x1ba	; 0x1ba <state_chart_runCycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 894:	8f e3       	ldi	r24, 0x3F	; 63
 896:	9c e9       	ldi	r25, 0x9C	; 156
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	f1 f7       	brne	.-4      	; 0x898 <main+0x2e>
 89c:	00 c0       	rjmp	.+0      	; 0x89e <main+0x34>
 89e:	00 00       	nop
 8a0:	ef cf       	rjmp	.-34     	; 0x880 <main+0x16>

000008a2 <state_chartIface_setLight>:

}

//Functions from State_chartRequired.h
void state_chartIface_setLight(const State_chart* handle, const sc_boolean lightOn) {
    if(lightOn)
 8a2:	61 11       	cpse	r22, r1
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <state_chartIface_setLight+0x8>
        PORTB |= (1<<5);
    else
    	PORTB &= ~(1<<5);
 8a6:	2d 98       	cbi	0x05, 5	; 5
 8a8:	08 95       	ret
}

//Functions from State_chartRequired.h
void state_chartIface_setLight(const State_chart* handle, const sc_boolean lightOn) {
    if(lightOn)
        PORTB |= (1<<5);
 8aa:	2d 9a       	sbi	0x05, 5	; 5
 8ac:	08 95       	ret

000008ae <__tablejump2__>:
 8ae:	ee 0f       	add	r30, r30
 8b0:	ff 1f       	adc	r31, r31

000008b2 <__tablejump__>:
 8b2:	05 90       	lpm	r0, Z+
 8b4:	f4 91       	lpm	r31, Z
 8b6:	e0 2d       	mov	r30, r0
 8b8:	09 94       	ijmp

000008ba <_exit>:
 8ba:	f8 94       	cli

000008bc <__stop_program>:
 8bc:	ff cf       	rjmp	.-2      	; 0x8bc <__stop_program>
